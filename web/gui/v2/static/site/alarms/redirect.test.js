import{screen}from"testUtilities";import{main}from"./redirect";const assignMock=jest.fn(),replaceMock=jest.fn(),buildQuery=({agentId:e="agent-id",host:t="hostname1",childId:a="",chart:s="ipv4.tcphandshake",alarm:n="10s_ipv4_tcp_resets_received",alarm_chart:r="ipv4.tcphandshake"}={})=>{const o=`?agentId=${e}&host=${t}&chart=${s}&alarm=${n}&alarm_chart=${r}${a&&`childId=${a}`}`,i={...window.location,assign:assignMock,replace:replaceMock,search:o};Object.defineProperty(window,"location",{writable:!0,value:i})},agentInfoRegex=/\/api\/v1\/agents\/agent-id\/info/,userAccessRegex=/\/api\/v1\/agents\/agent-id\/user_access/,spacesRegex=/\/api\/v1\/spaces$/,spaceRoomsRegex=/\/api\/v1\/spaces\/space1\/rooms$/,roomNodesRegex=/\/api\/v1\/spaces\/space1\/rooms\/room1\/nodes$/,meRegex=/\/api\/v1\/accounts\/me/,visitedNodesRegex=/\/api\/v1\/accounts\/account1\/nodes\/agent-id/,agentRegex=/http:\/\/agent.url/,agent2Regex=/http:\/\/agent2.url/,wrapOK=e=>Promise.resolve(JSON.stringify(e)),wrapError=e=>Promise.reject(JSON.stringify(e));describe.skip("redirect.js",(()=>{it("renders error info when no agentId is passed",(()=>{main(),expect(screen.getByText('missing "agentId" query string parameter'))})),it("constructs proper params (eg. concatenates alarm_id) and redirects to cloud",(async()=>{fetch.mockResponse((({url:e})=>agentInfoRegex.test(e)?wrapOK({reachable:!0}):userAccessRegex.test(e)?wrapOK({authorizedNodeIDs:["node_id_1"]}):spacesRegex.test(e)?wrapOK({results:[{id:"space1",slug:"spaceSlug1"}]}):spaceRoomsRegex.test(e)?wrapOK({results:[{id:"room1",slug:"roomSlug1"}]}):roomNodesRegex.test(e)?wrapOK({results:[{id:"node_id_1"}]}):void console.warn("Call not handled",e))),buildQuery(),await main(),expect(assignMock).toBeCalledWith("/spaces/spaceSlug1/rooms/roomSlug1/alerts/ipv4.tcphandshake.10s_ipv4_tcp_resets_received:::node_id_1")})),it("if node is found but is unreachable in cloud, and if it's found in registry and agent url is responding, redirect to agent",(async()=>{fetch.mockResponse((({url:e})=>agentInfoRegex.test(e)?wrapOK({claimed:!0,reachable:!1}):meRegex.test(e)?wrapOK({id:"account1"}):visitedNodesRegex.test(e)?wrapOK({urls:["http://agent.url"]}):agentRegex.test(e)?wrapOK({}):void console.warn("Call not handled",e))),buildQuery(),await main(),expect(replaceMock).toBeCalledWith("http://agent.url/#top;nowelcome=1;host=hostname1;chart=ipv4.tcphandshake;alarm=10s_ipv4_tcp_resets_received;alarm_chart=ipv4.tcphandshake")})),it("if node is not found in cloud, if found in registry and agent url is responding, redirect to agent",(async()=>{fetch.mockResponse((({url:e})=>agentInfoRegex.test(e)?wrapOK({claimed:!1,reachable:!1}):meRegex.test(e)?wrapOK({id:"account1"}):visitedNodesRegex.test(e)?wrapOK({urls:["http://agent.url"]}):agentRegex.test(e)?wrapOK({}):void console.warn("Call not handled",e))),buildQuery(),await main(),expect(replaceMock).toBeCalledWith("http://agent.url/#top;nowelcome=1;host=hostname1;chart=ipv4.tcphandshake;alarm=10s_ipv4_tcp_resets_received;alarm_chart=ipv4.tcphandshake")})),it("if node is not found in cloud, and found in registry but no agent responds, show message containing urls",(async()=>{fetch.mockResponse((({url:e})=>agentInfoRegex.test(e)?wrapOK({claimed:!1,reachable:!1}):meRegex.test(e)?wrapOK({id:"account1"}):visitedNodesRegex.test(e)?wrapOK({urls:["http://agent.url","http://agent2.url"]}):agentRegex.test(e)||agent2Regex.test(e)?wrapError({}):void console.warn("Call not handled",e))),buildQuery(),await main(),expect(screen.getByTestId("agents-list")).toBeInTheDocument(),expect(screen.getByTestId("agent-link-0")).toHaveTextContent("http://agent.url"),expect(screen.getByTestId("agent-link-1")).toHaveTextContent("http://agent2.url")})),it("if node is found and unreachable in cloud, and found in registry but doesn't respond, redirect to cloud",(async()=>{fetch.mockResponse((({url:e})=>agentInfoRegex.test(e)?wrapOK({claimed:!0,reachable:!1}):meRegex.test(e)?wrapOK({id:"account1"}):visitedNodesRegex.test(e)?wrapOK({urls:["http://agent.url"]}):agentRegex.test(e)?wrapError({}):userAccessRegex.test(e)?wrapOK({authorizedNodeIDs:["node_id_1"]}):spacesRegex.test(e)?wrapOK({results:[{id:"space1",slug:"spaceSlug1"}]}):spaceRoomsRegex.test(e)?wrapOK({results:[{id:"room1",slug:"roomSlug1"}]}):roomNodesRegex.test(e)?wrapOK({results:[{id:"node_id_1"}]}):void console.warn("Call not handled",e))),buildQuery(),await main(),expect(assignMock).toBeCalledWith("/spaces/spaceSlug1/rooms/roomSlug1/alerts/ipv4.tcphandshake.10s_ipv4_tcp_resets_received:::node_id_1")}))}));