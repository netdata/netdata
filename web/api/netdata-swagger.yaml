openapi: 3.0.0
info:
  title: Netdata API
  description: Real-time performance and health monitoring.
  version: "1.38"
  contact:
    name: Netdata Agent API
    email: info@netdata.cloud
    url: https://netdata.cloud
  license:
    name: GPL v3+
    url: https://github.com/netdata/netdata/blob/master/LICENSE
servers:
  - url: https://registry.my-netdata.io
  - url: http://registry.my-netdata.io
  - url: http://localhost:19999
tags:
  - name: nodes
    description: Everything related to monitored nodes
  - name: charts
    description: Everything related to chart instances - DO NOT USE IN NEW CODE - use contexts instead
  - name: contexts
    description: Everything related contexts - in new code, use this instead of charts
  - name: data
    description: Everything related to data queries
  - name: badges
    description: Everything related to dynamic badges based on metric data
  - name: weights
    description: Everything related to scoring / weighting metrics
  - name: functions
    description: Everything related to functions
  - name: alerts
    description: Everything related to alerts
  - name: management
    description: Everything related to managing netdata agents
paths:
  /api/v2/nodes:
    get:
      operationId: getNodes2
      tags:
        - nodes
      summary: Nodes Info v2
      description: |
        Get a list of all nodes hosted by this Netdata agent.
      parameters:
        - $ref: '#/components/parameters/scopeNodes'
        - $ref: '#/components/parameters/scopeContexts'
        - $ref: '#/components/parameters/filterNodes'
        - $ref: '#/components/parameters/filterContexts'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                description: |
                  `/api/v2/nodes` response for all nodes hosted by a Netdata agent.
                type: object
                properties:
                  api:
                    $ref: '#/components/schemas/api'
                  agents:
                    $ref: '#/components/schemas/agents'
                  versions:
                    $ref: '#/components/schemas/versions'
                  nodes:
                    type: array
                    items:
                      $ref: '#/components/schemas/nodeFull'
  /api/v2/contexts:
    get:
      operationId: getContexts2
      tags:
        - contexts
      summary: Contexts Info v2
      description: |
        Get a list of all contexts, across all nodes, hosted by this Netdata agent.
      parameters:
        - $ref: '#/components/parameters/scopeNodes'
        - $ref: '#/components/parameters/scopeContexts'
        - $ref: '#/components/parameters/filterNodes'
        - $ref: '#/components/parameters/filterContexts'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contexts2'
  /api/v2/q:
    get:
      operationId: q2
      tags:
        - contexts
      summary: Full Text Search v2
      description: |
        Get a list of contexts, across all nodes, hosted by this Netdata agent, matching a string expression
      parameters:
        - name: q
          in: query
          description: The strings to search for, formatted as a simple pattern
          required: true
          schema:
            type: string
            format: simple pattern
        - $ref: '#/components/parameters/scopeNodes'
        - $ref: '#/components/parameters/scopeContexts'
        - $ref: '#/components/parameters/filterNodes'
        - $ref: '#/components/parameters/filterContexts'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contexts2'
  /api/v1/info:
    get:
      operationId: getNodeInfo1
      tags:
        - nodes
      summary: Node Info v1
      description: |
        The info endpoint returns basic information about netdata. It provides:
        * netdata version
        * netdata unique id
        * list of hosts mirrored (includes itself)
        * Operating System, Virtualization, K8s nodes and Container technology information
        * List of active collector plugins and modules
        * Streaming information
        * number of alarms in the host
          * number of alarms in normal state
          * number of alarms in warning state
          * number of alarms in critical state
      responses:
        "200":
          description: netdata basic information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/info"
        "503":
          description: netdata daemon not ready (used for health checks).
  /api/v1/charts:
    get:
      operationId: getNodeCharts1
      tags:
        - charts
      summary: List all charts v1 - EOL
      description: The charts endpoint returns a summary about all charts stored in the
        netdata server.
      responses:
        "200":
          description: An array of charts.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/chart_summary"
  /api/v1/chart:
    get:
      operationId: getNodeChart1
      tags:
        - charts
      summary: Get one chart v1 - EOL
      description: The chart endpoint returns detailed information about a chart.
      parameters:
        - $ref: '#/components/parameters/chart'
      responses:
        "200":
          description: A javascript object with detailed information about the chart.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/chart"
        "400":
          description: No chart id was supplied in the request.
        "404":
          description: No chart with the given id is found.
  /api/v1/contexts:
    get:
      operationId: getNodeContexts1
      tags:
        - contexts
      summary: Get a list of all node contexts available v1
      description: The contexts endpoint returns a summary about all contexts stored in the
        netdata server.
      parameters:
        - $ref: '#/components/parameters/dimensions'
        - $ref: '#/components/parameters/chart_label_key'
        - $ref: '#/components/parameters/chart_labels_filter'
        - $ref: '#/components/parameters/contextOptions1'
        - $ref: '#/components/parameters/after'
        - $ref: '#/components/parameters/before'
      responses:
        "200":
          description: An array of contexts.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/context_summary"
  /api/v1/context:
    get:
      operationId: getNodeContext1
      tags:
        - contexts
      summary: Get info about a specific context
      description: |
        The context endpoint returns detailed information about a given context.
        The `context` parameter is required for this call.
      parameters:
        - $ref: '#/components/parameters/context'
        - $ref: '#/components/parameters/dimensions'
        - $ref: '#/components/parameters/chart_label_key'
        - $ref: '#/components/parameters/chart_labels_filter'
        - $ref: '#/components/parameters/contextOptions1'
        - $ref: '#/components/parameters/after'
        - $ref: '#/components/parameters/before'
      responses:
        "200":
          description: A javascript object with detailed information about the context.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/context"
        "400":
          description: No context id was supplied in the request.
        "404":
          description: No context with the given id is found.
  /api/v2/data:
    get:
      operationId: dataQuery2
      tags:
        - data
      summary: Data Query v2
      description: |
        Multi-node, multi-context, multi-instance, multi-dimension data queries, with time and metric aggregation.
      parameters:
        - name: group_by
          in: query
          description: |
            A comma separated list of the groupings required.
            All possible values can be combined together, except `selected`. If `selected` is given in the list, all others are ignored.
            The order they are placed in the list is currently ignored.
          required: false
          schema:
            type: array
            items:
              type: string
              enum:
                - dimension
                - instance
                - label
                - node
                - context
                - units
                - selected
            default:
              - dimension
        - name: group_by_label
          in: query
          description: |
            A comma separated list of the label keys to group by their values. The order of the labels in the list is respected.
          required: false
          schema:
            type: string
            format: comma separated list of label keys to group by
            default: ""
        - name: aggregation
          in: query
          description: |
            The aggregation function to apply when grouping metrics together.
            When option `raw` is given, `average` and `avg` behave like `sum` and the caller is expected to calculate the average.
          required: false
          schema:
            type: string
            enum:
              - min
              - max
              - avg
              - average
              - sum
            default: average
        - $ref: '#/components/parameters/scopeNodes'
        - $ref: '#/components/parameters/scopeContexts'
        - $ref: '#/components/parameters/filterNodes'
        - $ref: '#/components/parameters/filterContexts'
        - $ref: '#/components/parameters/filterInstances'
        - $ref: '#/components/parameters/filterLabels'
        - $ref: '#/components/parameters/filterAlerts'
        - $ref: '#/components/parameters/filterDimensions'
        - $ref: '#/components/parameters/after'
        - $ref: '#/components/parameters/before'
        - $ref: '#/components/parameters/points'
        - $ref: '#/components/parameters/tier'
        - $ref: '#/components/parameters/dataQueryOptions'
        - $ref: '#/components/parameters/dataTimeGroup2'
        - $ref: '#/components/parameters/dataTimeGroupOptions2'
        - $ref: '#/components/parameters/dataTimeResampling2'
        - $ref: '#/components/parameters/dataFormat2'
        - $ref: '#/components/parameters/timeoutMS'
        - $ref: '#/components/parameters/callback'
        - $ref: '#/components/parameters/filename'
        - $ref: '#/components/parameters/tqx'
      responses:
        "200":
          description: |
            The call was successful. The response includes the data in the format requested.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/jsonwrap2'
                  - $ref: '#/components/schemas/data_json_formats2'
            text/plain:
              schema:
                type: string
                format: according to the format requested.
            text/html:
              schema:
                type: string
                format: html
            application/x-javascript:
              schema:
                type: string
                format: javascript
        "400":
          description: |
            Bad request - the body will include a message stating what is wrong.
        "500":
          description: |
            Internal server error. This usually means the server is out of memory.
  /api/v1/data:
    get:
      operationId: dataQuery1
      tags:
        - data
      summary: Data Query v1 - Single node, single chart or context queries. without group-by.
      description: |
        Query metric data of a chart or context of a node and return a dataset having time-series data for all dimensions available.
        For group-by functionality, use `/api/v2/data`.
        At least a `chart` or a `context` have to be given for the data query to be executed.
      parameters:
        - $ref: '#/components/parameters/chart'
        - $ref: '#/components/parameters/context'
        - $ref: '#/components/parameters/dimension'
        - $ref: '#/components/parameters/chart_label_key'
        - $ref: '#/components/parameters/chart_labels_filter'
        - $ref: '#/components/parameters/after'
        - $ref: '#/components/parameters/before'
        - $ref: '#/components/parameters/points'
        - $ref: '#/components/parameters/tier'
        - $ref: '#/components/parameters/dataQueryOptions'
        - $ref: '#/components/parameters/dataFormat1'
        - $ref: '#/components/parameters/dataTimeGroup1'
        - $ref: '#/components/parameters/dataTimeGroupOptions1'
        - $ref: '#/components/parameters/dataTimeResampling1'
        - $ref: '#/components/parameters/timeoutMS'
        - $ref: '#/components/parameters/callback'
        - $ref: '#/components/parameters/filename'
        - $ref: '#/components/parameters/tqx'
      responses:
        "200":
          description: |
            The call was successful. The response includes the data in the format requested.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/jsonwrap1'
                  - $ref: '#/components/schemas/data_json_formats1'
            text/plain:
              schema:
                type: string
                format: according to the format requested.
            text/html:
              schema:
                type: string
                format: html
            application/x-javascript:
              schema:
                type: string
                format: javascript
        "400":
          description: Bad request - the body will include a message stating what is wrong.
        "404":
          description: Chart or context is not found. The supplied chart or context will be reported.
        "500":
          description: Internal server error. This usually means the server is out of
            memory.
  /api/v1/allmetrics:
    get:
      operationId: allMetrics1
      tags:
        - data
      summary: All Metrics v1 - Fetch latest value for all metrics
      description: |
        The `allmetrics` endpoint returns the latest value of all metrics maintained for a netdata node.
      parameters:
        - name: format
          in: query
          description: The format of the response to be returned.
          required: true
          schema:
            type: string
            enum:
              - shell
              - prometheus
              - prometheus_all_hosts
              - json
            default: shell
        - name: filter
          in: query
          description: Allows to filter charts out using simple patterns.
          required: false
          schema:
            type: string
            format: any text
        - name: variables
          in: query
          description: |
            When enabled, netdata will expose various system configuration variables.
          required: false
          schema:
            type: string
            enum:
              - yes
              - no
            default: no
        - name: help
          in: query
          description: |
            Enable or disable HELP lines in prometheus output.
          required: false
          schema:
            type: string
            enum:
              - yes
              - no
            default: no
        - name: types
          in: query
          description: |
            Enable or disable TYPE lines in prometheus output.
          required: false
          schema:
            type: string
            enum:
              - yes
              - no
            default: no
        - name: timestamps
          in: query
          description: |
            Enable or disable timestamps in prometheus output.
          required: false
          schema:
            type: string
            enum:
              - yes
              - no
            default: yes
        - name: names
          in: query
          description: |
            When enabled netdata will report dimension names. When disabled netdata will report dimension IDs. The default is controlled in netdata.conf.
          required: false
          schema:
            type: string
            enum:
              - yes
              - no
            default: yes
        - name: oldunits
          in: query
          description: |
            When enabled, netdata will show metric names for the default `source=average` as they appeared before 1.12, by using the legacy unit naming conventions.
          required: false
          schema:
            type: string
            enum:
              - yes
              - no
            default: yes
        - name: hideunits
          in: query
          description: |
            When enabled, netdata will not include the units in the metric names, for the default `source=average`.
          required: false
          schema:
            type: string
            enum:
              - yes
              - no
            default: yes
        - name: server
          in: query
          description: |
            Set a distinct name of the client querying prometheus metrics. Netdata will use the client IP if this is not set.
          required: false
          schema:
            type: string
            format: any text
        - name: prefix
          in: query
          description: |
            Prefix all prometheus metrics with this string.
          required: false
          schema:
            type: string
            format: any text
        - name: data
          in: query
          description: |
            Select the prometheus response data source. There is a setting in netdata.conf for the default.
          required: false
          schema:
            type: string
            enum:
              - as-collected
              - average
              - sum
            default: average
      responses:
        "200":
          description: All the metrics returned in the format requested.
        "400":
          description: The format requested is not supported.
  /api/v1/badge.svg:
    get:
      operationId: badge1
      tags:
        - badges
      summary: Generate a badge in form of SVG image for a chart (or dimension)
      description: Successful responses are SVG images.
      parameters:
        - $ref: '#/components/parameters/chart'
        - $ref: '#/components/parameters/dimension'
        - $ref: '#/components/parameters/after'
        - $ref: '#/components/parameters/before'
        - $ref: '#/components/parameters/dataTimeGroup1'
        - $ref: '#/components/parameters/dataQueryOptions'
        - name: alarm
          in: query
          description: The name of an alarm linked to the chart.
          required: false
          allowEmptyValue: true
          schema:
            type: string
            format: any text
        - name: label
          in: query
          description: A text to be used as the label.
          required: false
          allowEmptyValue: true
          schema:
            type: string
            format: any text
        - name: units
          in: query
          description: A text to be used as the units.
          required: false
          allowEmptyValue: true
          schema:
            type: string
            format: any text
        - name: label_color
          in: query
          description: |
            A color to be used for the background of the label side(left side) of the badge. One of predefined colors or specific color in hex `RGB` or `RRGGBB` format (without preceding `#` character). If value wrong or not given default color will be used.
          required: false
          allowEmptyValue: true
          schema:
            oneOf:
              - type: string
                enum:
                  - green
                  - brightgreen
                  - yellow
                  - yellowgreen
                  - orange
                  - red
                  - blue
                  - grey
                  - gray
                  - lightgrey
                  - lightgray
              - type: string
                format: ^([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$
        - name: value_color
          in: query
          description: |
            A color to be used for the background of the value *(right)* part of badge. You can set multiple using a pipe with a condition each, like this: `color<value|color:null` The following operators are supported: >, <, >=, <=, =, :null (to check if no value exists). Each color can be specified in same manner as for `label_color` parameter. Currently only integers are supported as values.
          required: false
          allowEmptyValue: true
          schema:
            type: string
            format: any text
        - name: text_color_lbl
          in: query
          description: |
            Font color for label *(left)* part of the badge. One of predefined colors or as HTML hexadecimal color without preceding `#` character. Formats allowed `RGB` or `RRGGBB`. If no or wrong value given default color will be used.
          required: false
          allowEmptyValue: true
          schema:
            oneOf:
              - type: string
                enum:
                  - green
                  - brightgreen
                  - yellow
                  - yellowgreen
                  - orange
                  - red
                  - blue
                  - grey
                  - gray
                  - lightgrey
                  - lightgray
              - type: string
                format: ^([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$
        - name: text_color_val
          in: query
          description: |
            Font color for value *(right)* part of the badge. One of predefined colors or as HTML hexadecimal color without preceding `#` character. Formats allowed `RGB` or `RRGGBB`. If no or wrong value given default color will be used.
          required: false
          allowEmptyValue: true
          schema:
            oneOf:
              - type: string
                enum:
                  - green
                  - brightgreen
                  - yellow
                  - yellowgreen
                  - orange
                  - red
                  - blue
                  - grey
                  - gray
                  - lightgrey
                  - lightgray
              - type: string
                format: ^([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$
        - name: multiply
          in: query
          description: Multiply the value with this number for rendering it at the image
            (integer value required).
          required: false
          allowEmptyValue: true
          schema:
            type: number
            format: integer
        - name: divide
          in: query
          description: Divide the value with this number for rendering it at the image
            (integer value required).
          required: false
          allowEmptyValue: true
          schema:
            type: number
            format: integer
        - name: scale
          in: query
          description: Set the scale of the badge (greater or equal to 100).
          required: false
          allowEmptyValue: true
          schema:
            type: number
            format: integer
        - name: fixed_width_lbl
          in: query
          description: |
            This parameter overrides auto-sizing of badge and creates it with fixed width. This parameter determines the size of the label's left side *(label/name)*. You must set this parameter together with `fixed_width_val` otherwise it will be ignored. You should set the label/value widths wide enough to provide space for all the possible values/contents of the badge you're requesting. In case the text cannot fit the space given it will be clipped. The `scale` parameter still applies on the values you give to `fixed_width_lbl` and `fixed_width_val`.
          required: false
          allowEmptyValue: false
          schema:
            type: number
            format: integer
        - name: fixed_width_val
          in: query
          description: |
            This parameter overrides auto-sizing of badge and creates it with fixed width. This parameter determines the size of the label's right side *(value)*. You must set this parameter together with `fixed_width_lbl` otherwise it will be ignored. You should set the label/value widths wide enough to provide space for all the possible values/contents of the badge you're requesting. In case the text cannot fit the space given it will be clipped. The `scale` parameter still applies on the values you give to `fixed_width_lbl` and `fixed_width_val`.
          required: false
          allowEmptyValue: false
          schema:
            type: number
            format: integer
      responses:
        "200":
          description: The call was successful. The response should be an SVG image.
        "400":
          description: Bad request - the body will include a message stating what is wrong.
        "404":
          description: No chart with the given id is found.
        "500":
          description: Internal server error. This usually means the server is out of
            memory.
  /api/v2/weights:
    get:
      operationId: weights2
      tags:
        - weights
      summary: Score or weight all or some of the metrics, across all nodes, according to various algorithms.
      description: |
        This endpoint goes through all metrics and scores them according to an algorithm.
      parameters:
        - $ref: '#/components/parameters/weightMethods'
        - $ref: '#/components/parameters/scopeNodes'
        - $ref: '#/components/parameters/scopeContexts'
        - $ref: '#/components/parameters/filterNodes'
        - $ref: '#/components/parameters/filterContexts'
        - $ref: '#/components/parameters/filterInstances'
        - $ref: '#/components/parameters/filterLabels'
        - $ref: '#/components/parameters/filterAlerts'
        - $ref: '#/components/parameters/filterDimensions'
        - $ref: '#/components/parameters/baselineAfter'
        - $ref: '#/components/parameters/baselineBefore'
        - $ref: '#/components/parameters/after'
        - $ref: '#/components/parameters/before'
        - $ref: '#/components/parameters/tier'
        - $ref: '#/components/parameters/points'
        - $ref: '#/components/parameters/timeoutMS'
        - $ref: '#/components/parameters/dataQueryOptions'
        - $ref: '#/components/parameters/dataTimeGroup2'
        - $ref: '#/components/parameters/dataTimeGroupOptions2'
      responses:
        "200":
          description: JSON object with weights for each context, chart and dimension.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/weights2"
        "400":
          description: The given parameters are invalid.
        "403":
          description: metrics correlations are not enabled on this Netdata Agent.
        "404":
          description: |
            No charts could be found, or the method that correlated the metrics did not produce any result.
        "504":
          description: Timeout - the query took too long and has been cancelled.
  /api/v1/weights:
    get:
      operationId: weights1
      tags:
        - weights
      summary: Score or weight all or some of the metrics of a single node, according to various algorithms.
      description: |
        This endpoint goes through all metrics and scores them according to an algorithm.
      parameters:
        - $ref: '#/components/parameters/weightMethods'
        - $ref: '#/components/parameters/context'
        - $ref: '#/components/parameters/baselineAfter'
        - $ref: '#/components/parameters/baselineBefore'
        - $ref: '#/components/parameters/after'
        - $ref: '#/components/parameters/before'
        - $ref: '#/components/parameters/tier'
        - $ref: '#/components/parameters/points'
        - $ref: '#/components/parameters/timeoutMS'
        - $ref: '#/components/parameters/dataQueryOptions'
        - $ref: '#/components/parameters/dataTimeGroup1'
        - $ref: '#/components/parameters/dataTimeGroupOptions1'
      responses:
        "200":
          description: JSON object with weights for each context, chart and dimension.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/weights"
        "400":
          description: The given parameters are invalid.
        "403":
          description: metrics correlations are not enabled on this Netdata Agent.
        "404":
          description: No charts could be found, or the method
            that correlated the metrics did not produce any result.
        "504":
          description: Timeout - the query took too long and has been cancelled.
  /api/v1/metric_correlations:
    get:
      operationId: metricCorrelations1
      tags:
        - weights
      summary: Analyze all the metrics to find their correlations - EOL
      description: |
        THIS ENDPOINT IS OBSOLETE. Use the /weights endpoint. Given two time-windows (baseline, highlight), it goes through all the available metrics, querying both windows and tries to find how these two windows relate to each other. It supports multiple algorithms to do so. The result is a list of all metrics evaluated, weighted for 0.0 (the two windows are more different) to 1.0 (the two windows are similar). The algorithm adjusts automatically the baseline window to be a power of two multiple of the highlighted (1, 2, 4, 8, etc).
      parameters:
        - $ref: '#/components/parameters/weightMethods'
        - $ref: '#/components/parameters/baselineAfter'
        - $ref: '#/components/parameters/baselineBefore'
        - $ref: '#/components/parameters/after'
        - $ref: '#/components/parameters/before'
        - $ref: '#/components/parameters/points'
        - $ref: '#/components/parameters/tier'
        - $ref: '#/components/parameters/timeoutMS'
        - $ref: '#/components/parameters/dataQueryOptions'
        - $ref: '#/components/parameters/dataTimeGroup1'
        - $ref: '#/components/parameters/dataTimeGroupOptions1'
      responses:
        "200":
          description: JSON object with weights for each chart and dimension.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/metric_correlations"
        "400":
          description: The given parameters are invalid.
        "403":
          description: metrics correlations are not enabled on this Netdata Agent.
        "404":
          description: No charts could be found, or the method
            that correlated the metrics did not produce any result.
        "504":
          description: Timeout - the query took too long and has been cancelled.
  /api/v1/function:
    get:
      operationId: function1
      tags:
        - functions
      description: "Execute a collector function."
      parameters:
        - name: function
          in: query
          description: The name of the function, as returned by the collector.
          required: true
          allowEmptyValue: false
          schema:
            type: string
        - $ref: '#/components/parameters/timeoutSecs'
      responses:
        "200":
          description: The collector function has been executed successfully. Each collector may return a different type of content.
        "400":
          description: The request was rejected by the collector.
        "404":
          description: The requested function is not found.
        "500":
          description: Other internal error, getting this error means there is a bug in Netdata.
        "503":
          description: The collector to execute the function is not currently available.
        "504":
          description: Timeout while waiting for the collector to execute the function.
        "591":
          description: The collector sent a response, but it was invalid or corrupted.
  /api/v1/functions:
    get:
      operationId: functions1
      tags:
        - functions
      summary: Get a list of all registered collector functions.
      description: Collector functions are programs that can be executed on demand.
      responses:
        "200":
          description: A JSON object containing one object per supported function.
  /api/v1/alarms:
    get:
      operationId: alerts1
      tags:
        - alerts
      summary: Get a list of active or raised alarms on the server
      description: |
        The alarms endpoint returns the list of all raised or enabled alarms on the netdata server. Called without any parameters, the raised alarms in state WARNING or CRITICAL are returned. By passing "?all", all the enabled alarms are returned.
      parameters:
        - name: all
          in: query
          description: If passed, all enabled alarms are returned.
          required: false
          allowEmptyValue: true
          schema:
            type: boolean
        - name: active
          in: query
          description: If passed, the raised alarms in state WARNING or CRITICAL are returned.
          required: false
          allowEmptyValue: true
          schema:
            type: boolean
      responses:
        "200":
          description: An object containing general info and a linked list of alarms.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/alarms"
  /api/v1/alarms_values:
    get:
      operationId: alertValues1
      tags:
        - alerts
      summary: Get a list of active or raised alarms on the server
      description: |
        The alarms_values endpoint returns the list of all raised or enabled alarms on the netdata server. Called without any parameters, the raised alarms in state WARNING or CRITICAL are returned. By passing '?all', all the enabled alarms are returned. This option output differs from `/alarms` in the number of variables delivered. This endpoint gives to user `id`, `value`, `last_updated` time, and alarm `status`.
      parameters:
        - name: all
          in: query
          description: If passed, all enabled alarms are returned.
          required: false
          allowEmptyValue: true
          schema:
            type: boolean
        - name: active
          in: query
          description: If passed, the raised alarms in state WARNING or CRITICAL are returned.
          required: false
          allowEmptyValue: true
          schema:
            type: boolean
      responses:
        "200":
          description: An object containing general info and a linked list of alarms.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/alarms_values"
  /api/v1/alarm_log:
    get:
      operationId: alertsLog1
      tags:
        - alerts
      summary: Retrieves the entries of the alarm log
      description: |
        Returns an array of alarm_log entries, with historical information on raised and cleared alarms.
      parameters:
        - name: after
          in: query
          description: |
            Passing the parameter after=UNIQUEID returns all the events in the alarm log that occurred after UNIQUEID. An automated series of calls would call the interface once without after=, store the last UNIQUEID of the returned set, and give it back to get incrementally the next events.
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: An array of alarm log entries.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/alarm_log_entry"
  /api/v1/alarm_count:
    get:
      operationId: alertsCount1
      tags:
        - alerts
      summary: Get an overall status of the chart
      description: |
        Checks multiple charts with the same context and counts number of alarms with given status.
      parameters:
        - $ref: '#/components/parameters/context'
        - name: status
          in: query
          description: Specify alarm status to count.
          required: false
          allowEmptyValue: true
          schema:
            type: string
            enum:
              - REMOVED
              - UNDEFINED
              - UNINITIALIZED
              - CLEAR
              - RAISED
              - WARNING
              - CRITICAL
            default: RAISED
      responses:
        "200":
          description: An object containing a count of alarms with given status for given
            contexts.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: number
        "500":
          description: Internal server error. This usually means the server is out of
            memory.
  /api/v1/alarm_variables:
    get:
      operationId: getNodeAlertVariables1
      tags:
        - alerts
      summary: List variables available to configure alarms for a chart
      description: |
        Returns the basic information of a chart and all the variables that can be used in alarm and template health configurations for the particular chart or family.
      parameters:
        - name: chart
          in: query
          description: The id of the chart as returned by the /charts call.
          required: true
          schema:
            type: string
            format: as returned by /charts
            default: system.cpu
      responses:
        "200":
          description: A javascript object with information about the chart and the
            available variables.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/alarm_variables"
        "400":
          description: Bad request - the body will include a message stating what is wrong.
        "404":
          description: No chart with the given id is found.
        "500":
          description: Internal server error. This usually means the server is out of
            memory.
  /api/v1/manage/health:
    get:
      operationId: health1
      tags:
        - management
      summary: |
        Accesses the health management API to control health checks and notifications at runtime.
      description: |
        Available from Netdata v1.12 and above, protected via bearer authorization. Especially useful for maintenance periods, the API allows you to disable health checks completely, silence alarm notifications, or Disable/Silence specific alarms that match selectors on alarm/template name, chart, context, host and family. For the simple disable/silence all scenarios, only the cmd parameter is required. The other parameters are used to define alarm selectors. For more information and examples, refer to the netdata documentation.
      parameters:
        - name: cmd
          in: query
          description: |
            DISABLE ALL: No alarm criteria are evaluated, nothing is written in the alarm log. SILENCE ALL: No notifications are sent. RESET: Return to the default state. DISABLE/SILENCE: Set the mode to be used for the alarms matching the criteria of the alarm selectors. LIST: Show active configuration.
          required: false
          schema:
            type: string
            enum:
              - DISABLE ALL
              - SILENCE ALL
              - DISABLE
              - SILENCE
              - RESET
              - LIST
        - name: alarm
          in: query
          description: The expression provided will match both `alarm` and `template` names.
          schema:
            type: string
        - name: chart
          in: query
          description: Chart ids/names, as shown on the dashboard. These will match the
            `on` entry of a configured `alarm`.
          schema:
            type: string
        - name: context
          in: query
          description: Chart context, as shown on the dashboard. These will match the `on`
            entry of a configured `template`.
          schema:
            type: string
        - name: hosts
          in: query
          description: The hostnames that will need to match.
          schema:
            type: string
        - name: families
          in: query
          description: The alarm families.
          schema:
            type: string
      responses:
        "200":
          description: A plain text response based on the result of the command.
        "403":
          description: Bearer authentication error.
  /api/v1/aclk:
    get:
      operationId: aclk1
      tags:
        - management
      summary: Get information about current ACLK state
      description: |
        ACLK endpoint returns detailed information about current state of ACLK (Agent to Cloud communication).
      responses:
        "200":
          description: JSON object with ACLK information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/aclk_state"
components:
  parameters:
    scopeNodes:
      name: scope_nodes
      in: query
      description: |
        A simple pattern limiting the nodes scope of the query. The scope controls both data and metadata response. The simple pattern is checked against the nodes' machine guid, node id and hostname. The default nodes scope is all nodes for which this agent has data for. Usually the nodes scope is used to slice the entire dashboard (e.g. the Global Nodes Selector at the Netdata Cloud overview dashboard). Both positive and negative simple pattern expressions are supported.
      required: false
      schema:
        type: string
        format: simple pattern
        default: "*"
    scopeContexts:
      name: scope_contexts
      in: query
      description: |
        A simple pattern limiting the contexts scope of the query. The scope controls both data and metadata response. The default contexts scope is all contexts for which this agent has data for. Usually the contexts scope is used to slice data on the dashboard (e.g. each context based chart has its own contexts scope, limiting the chart to all the instances of the selected context). Both positive and negative simple pattern expressions are supported.
      required: false
      schema:
        type: string
        format: simple pattern
        default: "*"
    filterNodes:
      name: nodes
      in: query
      description: |
        A simple pattern matching the nodes to be queried. This only controls the data response, not the metadata. The simple pattern is checked against the nodes' machine guid, node id, hostname. The default nodes selector is all the nodes matched by the nodes scope. Both positive and negative simple pattern expressions are supported.
      required: false
      schema:
        type: string
        format: simple pattern
        default: "*"
    filterContexts:
      name: contexts
      in: query
      description: |
        A simple pattern matching the contexts to be queried. This only controls the data response, not the metadata. Both positive and negative simple pattern expressions are supported.
      required: false
      schema:
        type: string
        format: simple pattern
        default: "*"
    filterInstances:
      name: instances
      in: query
      description: |
        A simple pattern matching the instances to be queried. The simple pattern is checked against the instance `id`, the instance `name`, the fully qualified name of the instance `id` and `name`, like `instance@machine_guid`, where `instance` is either its `id` or `name`. Both positive and negative simple pattern expressions are supported.
      required: false
      schema:
        type: string
        format: simple pattern
        default: "*"
    filterLabels:
      name: labels
      in: query
      description: |
        A simple pattern matching the labels to be queried. The simple pattern is checked against `name:value` of all the labels of all the eligible instances (as filtered by all the above: scope nodes, scope contexts, nodes, contexts and instances). Negative simple patterns should not be used in this filter.
      required: false
      schema:
        type: string
        format: simple pattern
        default: "*"
    filterAlerts:
      name: alerts
      in: query
      description: |
        A simple pattern matching the alerts to be queried. The simple pattern is checked against the `name` of alerts and the combination of `name:status`, when status is one of `CLEAR`, `WARNING`, `CRITICAL`, `REMOVED`, `UNDEFINED`, `UNINITIALIZED`, of all the alerts of all the eligible instances (as filtered by all the above). A negative simple pattern will exclude the instances having the labels matched.
      required: false
      schema:
        type: string
        format: simple pattern
        default: "*"
    filterDimensions:
      name: dimensions
      in: query
      description: |
        A simple patterns matching the dimensions to be queried. The simple pattern is checked against and `id` and the `name` of the dimensions of the eligible instances (as filtered by all the above). Both positive and negative simple pattern expressions are supported.
      required: false
      schema:
        type: string
        format: simple pattern
        default: "*"

    dataFormat1:
      name: format
      in: query
      description: The format of the data to be returned.
      allowEmptyValue: false
      schema:
        type: string
        enum:
          - json
          - jsonp
          - csv
          - tsv
          - tsv-excel
          - ssv
          - ssvcomma
          - datatable
          - datasource
          - html
          - markdown
          - array
          - csvjsonarray
        default: json
    dataFormat2:
      name: format
      in: query
      description: The format of the data to be returned.
      allowEmptyValue: false
      schema:
        type: string
        enum:
          - json
          - json2
          - jsonp
          - csv
          - tsv
          - tsv-excel
          - ssv
          - ssvcomma
          - datatable
          - datasource
          - html
          - markdown
          - array
          - csvjsonarray
        default: json2
    dataQueryOptions:
      name: options
      in: query
      description: |
        Options that affect data generation.
        * `jsonwrap` - Wrap the output in a JSON object with metadata about the query.
        * `raw` - change the output so that it is aggregatable across multiple such queries. Supported by `/api/v2` data queries and `json2` format.
        * `minify` - Remove unnecessary spaces and newlines from the output.
        * `debug` - Provide additional information in `jsonwrap` output to help tracing issues.
        * `nonzero` - Do not return dimensions that all their values are zero, to improve the visual appearance of charts. They will still be returned if all the dimensions are entirely zero.
        * `null2zero` - Replace `null` values with `0`.
        * `absolute` or `abs` - Traditionally Netdata returns select dimensions negative to improve visual appearance. This option turns this feature off.
        * `display-absolute` - Only used by badges, to do color calculation using the signed value, but render the value without a sign.
        * `flip` or `reversed` - Order the timestamps array in reverse order (newest to oldest).
        * `min2max` - When flattening multi-dimensional data into a single metric format, use `max - min` instead of `sum`. This is EOL - use `/api/v2` to control aggregation across dimensions.
        * `percentage` - Convert all values into a percentage vs the row total. When enabled, Netdata will query all dimensions, even the ones that have not been selected or are hidden, to find the row total, in order to calculate the percentage of each dimension selected.
        * `seconds` - Output timestamps in seconds instead of dates.
        * `milliseconds` or `ms` - Output timestamps in milliseconds instead of dates.
        * `unaligned` - by default queries are aligned to the the view, so that as time passes past data returned do not change. When a data query will not be used for visualization, `unaligned` can be given to avoid aligning the query time-frame for visual precision.
        * `match-ids`, `match-names`. By default filters match both IDs and names when they are available. Setting either of the two options will disable the other.
        * `anomaly-bit` - query the anomaly information instead of metric values. This is EOL, use `/api/v2` and `json2` format which always returns this information and many more.
        * `jw-anomaly-rates` - return anomaly rates as a separate result set in the same `json` format response. This is EOL, use `/api/v2` and `json2` format which always returns information and many more. 
        * `details` - `/api/v2/data` returns in `jsonwrap` the full tree of dimensions that have been matched by the query.
        * `group-by-labels` - `/api/v2/data` returns in `jsonwrap` flattened labels per output dimension. These are used to identify the instances that have been aggregated into each dimension, making it possible to provide a map, like Netdata does for Kubernetes.
        * `natural-points` - return timestamps as found in the database. The result is again fixed-step, but the query engine attempts to align them with the timestamps found in the database.
        * `virtual-points` - return timestamps independent of the database alignment. This is needed aggregating data across multiple Netdata agents, to ensure that their outputs do not need to be interpolated to be merged.
        * `selected-tier` - use data exclusively from the selected tier given with the `tier` parameter. This option is set automatically when the `tier` parameter is set.
        * `all-dimensions` - In `/api/v1` `jsonwrap` include metadata for all candidate metrics examined. In `/api/v2` this is standard behavior and no option is needed.
        * `label-quotes` - In `csv` output format, enclose each header label in quotes.
        * `objectrows` - Each row of value should be an object, not an array (only for `json` format).
        * `google_json` - Comply with google JSON/JSONP specs (only for `json` format).
      required: false
      allowEmptyValue: false
      schema:
        type: array
        items:
          type: string
          enum:
            - jsonwrap
            - raw
            - minify
            - debug
            - nonzero
            - null2zero
            - abs
            - absolute
            - display-absolute
            - flip
            - reversed
            - min2max
            - percentage
            - seconds
            - ms
            - milliseconds
            - unaligned
            - match-ids
            - match-names
            - anomaly-bit
            - jw-anomaly-rates
            - details
            - group-by-labels
            - natural-points
            - virtual-points
            - selected-tier
            - all-dimensions
            - label-quotes
            - objectrows
            - google_json
        default:
          - seconds
          - jsonwrap
    dataTimeGroup1:
      name: group
      in: query
      description: |
        Time aggregation function. If multiple collected values are to be grouped in order to return fewer points, this parameters defines the method of grouping. If the `absolute` option is set, the values are turned positive before applying this calculation.
      required: false
      schema:
        type: string
        enum:
          - min
          - max
          - avg
          - average
          - median
          - stddev
          - sum
          - incremental-sum
          - ses
          - des
          - cv
          - countif
          - percentile
          - percentile25
          - percentile50
          - percentile75
          - percentile80
          - percentile90
          - percentile95
          - percentile97
          - percentile98
          - percentile99
          - trimmed-mean
          - trimmed-mean1
          - trimmed-mean2
          - trimmed-mean3
          - trimmed-mean5
          - trimmed-mean10
          - trimmed-mean15
          - trimmed-mean20
          - trimmed-mean25
          - trimmed-median
          - trimmed-median1
          - trimmed-median2
          - trimmed-median3
          - trimmed-median5
          - trimmed-median10
          - trimmed-median15
          - trimmed-median20
          - trimmed-median25
        default: average
    dataTimeGroup2:
      name: time_group
      in: query
      description: |
        Time aggregation function. If multiple collected values are to be grouped in order to return fewer points, this parameters defines the method of grouping. If the `absolute` option is set, the values are turned positive before applying this calculation.
      required: false
      schema:
        type: string
        enum:
          - min
          - max
          - avg
          - average
          - median
          - stddev
          - sum
          - incremental-sum
          - ses
          - des
          - cv
          - countif
          - percentile
          - percentile25
          - percentile50
          - percentile75
          - percentile80
          - percentile90
          - percentile95
          - percentile97
          - percentile98
          - percentile99
          - trimmed-mean
          - trimmed-mean1
          - trimmed-mean2
          - trimmed-mean3
          - trimmed-mean5
          - trimmed-mean10
          - trimmed-mean15
          - trimmed-mean20
          - trimmed-mean25
          - trimmed-median
          - trimmed-median1
          - trimmed-median2
          - trimmed-median3
          - trimmed-median5
          - trimmed-median10
          - trimmed-median15
          - trimmed-median20
          - trimmed-median25
        default: average
    dataTimeGroupOptions1:
      name: group_options
      in: query
      description: |
        When the time grouping function supports additional parameters, this field can be used to pass them to it. Currently `countif`, `trimmed-mean`, `trimmed-median` and `percentile` support this. For `countif` the string may start with `<`, `<=`, `<:`, `<>`, `!=`, `>`, `>=`, `>:`. For all others just a number is expected.
      required: false
      schema:
        type: string
    dataTimeGroupOptions2:
      name: time_group_options
      in: query
      description: |
        When the time grouping function supports additional parameters, this field can be used to pass them to it. Currently `countif`, `trimmed-mean`, `trimmed-median` and `percentile` support this. For `countif` the string may start with `<`, `<=`, `<:`, `<>`, `!=`, `>`, `>=`, `>:`. For all others just a number is expected.
      required: false
      schema:
        type: string
    dataTimeResampling1:
      name: gtime
      in: query
      description: |
        The grouping number of seconds. This is used in conjunction with group=average to change the units of metrics (ie when the data is per-second, setting gtime=60 will turn them to per-minute).
      required: false
      allowEmptyValue: false
      schema:
        type: number
        format: integer
        default: 0
    dataTimeResampling2:
      name: time_resampling
      in: query
      description: |
        For incremental values that are "per second", this value is used to resample them to "per minute` (60) or "per hour" (3600). It can only be used in conjunction with group=average.
      required: false
      schema:
        type: number
        format: integer
        default: 0
    timeoutMS:
      name: timeout
      in: query
      description: |
        Specify a timeout value in milliseconds after which the agent will abort the query and return a 503 error. A value of 0 indicates no timeout.
      required: false
      schema:
        type: number
        format: integer
        default: 0
    timeoutSecs:
      name: timeout
      in: query
      description: |
        Specify a timeout value in seconds after which the agent will abort the query and return a 504 error. A value of 0 indicates no timeout, but some endpoints, like `weights`, do not accept infinite timeouts (they have a predefined default), so to disable the timeout it must be set to a really high value.
      required: false
      schema:
        type: number
        format: integer
        default: 0
    before:
      name: before
      in: query
      description: |
        `after` and `before` define the time-frame of a query. `before` can be a negative number of seconds, up to 3 years (-94608000), relative to current clock. If not set, it is assumed to be the current clock time. When `before` is positive, it is assumed to be a unix epoch timestamp. When non-data endpoints support the `after` and `before`, they use the time-frame to limit their response for objects having data retention within the time-frame given.
      required: false
      schema:
        type: integer
        default: 0
    after:
      name: after
      in: query
      description: |
        `after` and `before` define the time-frame of a query. `after` can be a negative number of seconds, up to 3 years (-94608000), relative to `before`. If not set, it is usually assumed to be -600. When non-data endpoints support the `after` and `before`, they use the time-frame to limit their response for objects having data retention within the time-frame given.
      required: false
      schema:
        type: integer
        default: -600
    baselineBefore:
      name: baseline_before
      in: query
      description: |
        `baseline_after` and `baseline_before` define the baseline time-frame of a comparative query. `baseline_before` can be a negative number of seconds, up to 3 years (-94608000), relative to current clock. If not set, it is assumed to be the current clock time. When `baseline_before` is positive, it is assumed to be a unix epoch timestamp.
      required: false
      schema:
        type: integer
        default: 0
    baselineAfter:
      name: baseline_after
      in: query
      description: |
        `baseline_after` and `baseline_before` define the baseline time-frame of a comparative query. `baseline_after` can be a negative number of seconds, up to 3 years (-94608000), relative to `baseline_before`. If not set, it is usually assumed to be -300.
      required: false
      schema:
        type: integer
        default: -600
    points:
      name: points
      in: query
      description: |
        The number of points to be returned. If not given, or it is <= 0, or it is bigger than the points stored in the database for the given duration, all the available collected values for the given duration will be returned. For `weights` endpoints that do statistical analysis, the `points` define the detail of this analysis (the default is 500).
      required: false
      schema:
        type: number
        format: integer
        default: 0
    tier:
      name: tier
      in: query
      description: |
        Use only the given dbengine tier for executing the query. Setting this parameters automatically sets the option `selected-tier` for the query.
      required: false
      schema:
        type: number
        format: integer
    callback:
      name: callback
      in: query
      description: |
        For JSONP responses, the callback function name.
      required: false
      schema:
        type: string
    filename:
      name: filename
      in: query
      description: |
        Add `Content-Disposition: attachment; filename=` header to the response, that will instruct the browser to save the response with the given filename."
      required: false
      schema:
        type: string
    tqx:
      name: tqx
      in: query
      description: |
        [Google Visualization API](https://developers.google.com/chart/interactive/docs/dev/implementing_data_source?hl=en) formatted parameter.
      required: false
      schema:
        type: string
    contextOptions1:
      name: options
      in: query
      description: Options that affect data generation.
      required: false
      schema:
        type: array
        items:
          type: string
          enum:
            - full
            - all
            - charts
            - dimensions
            - labels
            - uuids
            - queue
            - flags
            - deleted
            - deepscan
    chart:
      name: chart
      in: query
      description: The id of the chart as returned by the `/api/v1/charts` call.
      required: false
      allowEmptyValue: false
      schema:
        type: string
        format: as returned by `/api/v1/charts`
    context:
      name: context
      in: query
      description: The context of the chart as returned by the /charts call.
      required: false
      allowEmptyValue: false
      schema:
        type: string
        format: as returned by /charts
    dimension:
      name: dimension
      in: query
      description: Zero, one or more dimension ids or names, as returned by the /chart
        call, separated with comma or pipe. Netdata simple patterns are
        supported.
      required: false
      allowEmptyValue: false
      schema:
        type: array
        items:
          type: string
          format: as returned by /charts
    dimensions:
      name: dimensions
      in: query
      description: a simple pattern matching dimensions (use comma or pipe as separator)
      required: false
      allowEmptyValue: true
      schema:
        type: string
    chart_label_key:
      name: chart_label_key
      in: query
      description: |
        Specify the chart label keys that need to match for context queries as comma separated values. At least one matching key is needed to match the corresponding chart.
      required: false
      allowEmptyValue: false
      schema:
        type: string
        format: key1,key2,key3
    chart_labels_filter:
      name: chart_labels_filter
      in: query
      description: |
        Specify the chart label keys and values to match for context queries. All keys/values need to match for the chart to be included in the query. The labels are specified as key1:value1,key2:value2
      required: false
      allowEmptyValue: false
      schema:
        type: string
        format: key1:value1,key2:value2,key3:value3
    weightMethods:
      name: method
      in: query
      description: The weighting / scoring algorithm.
      required: false
      schema:
        type: string
        enum:
          - ks2
          - volume
          - anomaly-rate
          - value
  schemas:
    info:
      type: object
      properties:
        version:
          type: string
          description: netdata version of the server.
          example: 1.11.1_rolling
        uid:
          type: string
          description: netdata unique id of the server.
          example: 24e9fe3c-f2ac-11e8-bafc-0242ac110002
        mirrored_hosts:
          type: array
          description: List of hosts mirrored of the server (include itself).
          items:
            type: string
          example:
            - host1.example.com
            - host2.example.com
        mirrored_hosts_status:
          type: array
          description: >-
            List of details of hosts mirrored to this served (including self).
            Indexes correspond to indexes in "mirrored_hosts".
          items:
            type: object
            description: Host data
            properties:
              guid:
                type: string
                format: uuid
                nullable: false
                description: Host unique GUID from `netdata.public.unique.id`.
                example: 245e4bff-3b34-47c1-a6e5-5c535a9abfb2
              reachable:
                type: boolean
                nullable: false
                description: Current state of streaming. Always true for localhost/self.
              claim_id:
                type: string
                format: uuid
                nullable: true
                description: >-
                  Cloud GUID/identifier in case the host is claimed.
                  If child status unknown or unclaimed this field is set to `null`
                example: c3b2a66a-3052-498c-ac52-7fe9e8cccb0c
        os_name:
          type: string
          description: Operating System Name.
          example: Manjaro Linux
        os_id:
          type: string
          description: Operating System ID.
          example: manjaro
        os_id_like:
          type: string
          description: Known OS similar to this OS.
          example: arch
        os_version:
          type: string
          description: Operating System Version.
          example: 18.0.4
        os_version_id:
          type: string
          description: Operating System Version ID.
          example: unknown
        os_detection:
          type: string
          description: OS parameters detection method.
          example: Mixed
        kernel_name:
          type: string
          description: Kernel Name.
          example: Linux
        kernel_version:
          type: string
          description: Kernel Version.
          example: 4.19.32-1-MANJARO
        is_k8s_node:
          type: boolean
          description: Netdata is running on a K8s node.
          example: false
        architecture:
          type: string
          description: Kernel architecture.
          example: x86_64
        virtualization:
          type: string
          description: Virtualization Type.
          example: kvm
        virt_detection:
          type: string
          description: Virtualization detection method.
          example: systemd-detect-virt
        container:
          type: string
          description: Container technology.
          example: docker
        container_detection:
          type: string
          description: Container technology detection method.
          example: dockerenv
        stream_compression:
          type: boolean
          description: Stream transmission compression method.
          example: true
        labels:
          type: object
          description: List of host labels.
          properties:
            app:
              type: string
              description: Host label.
              example: netdata
        collectors:
          type: array
          items:
            type: object
            description: Array of collector plugins and modules.
            properties:
              plugin:
                type: string
                description: Collector plugin.
                example: python.d.plugin
              module:
                type: string
                description: Module of the collector plugin.
                example: dockerd
        alarms:
          type: object
          description: Number of alarms in the server.
          properties:
            normal:
              type: integer
              description: Number of alarms in normal state.
            warning:
              type: integer
              description: Number of alarms in warning state.
            critical:
              type: integer
              description: Number of alarms in critical state.
    chart_summary:
      type: object
      properties:
        hostname:
          type: string
          description: The hostname of the netdata server.
        version:
          type: string
          description: netdata version of the server.
        release_channel:
          type: string
          description: The release channel of the build on the server.
          example: nightly
        timezone:
          type: string
          description: The current timezone on the server.
        os:
          type: string
          description: The netdata server host operating system.
          enum:
            - macos
            - linux
            - freebsd
        history:
          type: number
          description: The duration, in seconds, of the round robin database maintained by
            netdata.
        memory_mode:
          type: string
          description: The name of the database memory mode on the server.
        update_every:
          type: number
          description: The default update frequency of the netdata server. All charts have
            an update frequency equal or bigger than this.
        charts:
          type: object
          description: An object containing all the chart objects available at the netdata
            server. This is used as an indexed array. The key of each chart
            object is the id of the chart.
          additionalProperties:
            $ref: "#/components/schemas/chart"
        charts_count:
          type: number
          description: The number of charts.
        dimensions_count:
          type: number
          description: The total number of dimensions.
        alarms_count:
          type: number
          description: The number of alarms.
        rrd_memory_bytes:
          type: number
          description: The size of the round robin database in bytes.
    chart:
      type: object
      properties:
        id:
          type: string
          description: The unique id of the chart.
        name:
          type: string
          description: The name of the chart.
        type:
          type: string
          description: The type of the chart. Types are not handled by netdata. You can use
            this field for anything you like.
        family:
          type: string
          description: The family of the chart. Families are not handled by netdata. You
            can use this field for anything you like.
        title:
          type: string
          description: The title of the chart.
        priority:
          type: number
          description: The relative priority of the chart. Netdata does not care about
            priorities. This is just an indication of importance for the chart
            viewers to sort charts of higher priority (lower number) closer to
            the top. Priority sorting should only be used among charts of the
            same type or family.
        enabled:
          type: boolean
          description: True when the chart is enabled. Disabled charts do not currently
            collect values, but they may have historical values available.
        units:
          type: string
          description: The unit of measurement for the values of all dimensions of the
            chart.
        data_url:
          type: string
          description: The absolute path to get data values for this chart. You are
            expected to use this path as the base when constructing the URL to
            fetch data values for this chart.
        chart_type:
          type: string
          description: The chart type.
          enum:
            - line
            - area
            - stacked
        duration:
          type: number
          description: The duration, in seconds, of the round robin database maintained by
            netdata.
        first_entry:
          type: number
          description: The UNIX timestamp of the first entry (the oldest) in the round
            robin database.
        last_entry:
          type: number
          description: The UNIX timestamp of the latest entry in the round robin database.
        update_every:
          type: number
          description: The update frequency of this chart, in seconds. One value every this
            amount of time is kept in the round robin database.
        dimensions:
          type: object
          description: |
            An object containing all the chart dimensions available for the chart. This is used as an indexed array. For each pair in the dictionary: the key is the id of the dimension and the value is a dictionary containing the name."
          additionalProperties:
            type: object
            properties:
              name:
                type: string
                description: The name of the dimension
        chart_variables:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/chart_variables"
        green:
          type: number
          nullable: true
          description: Chart health green threshold.
        red:
          type: number
          nullable: true
          description: Chart health red threshold.
    context_summary:
      type: object
      properties:
        hostname:
          type: string
          description: The hostname of the netdata server.
        machine_guid:
          type: string
          description: The unique installation id of this netdata server.
        node_id:
          type: string
          description: The unique node id of this netdata server at the hub.
          example: nightly
        claim_id:
          type: string
          description: The unique handshake id of this netdata server and the hub.
        host_labels:
          type: object
          description: The host labels associated with this netdata server.
        context:
          type: object
          description: "An object containing all the context objects available at the netdata server.
            This is used as an indexed array. The key of each context object is the id of the context."
          additionalProperties:
            $ref: "#/components/schemas/context"
    context:
      type: object
      properties:
        version:
          type: string
          description: "The version of this context.
            The number are not sequential, but bigger numbers depict a newer object."
        hub_version:
          type: string
          description: The version of this context, as known by hub.
        family:
          type: string
          description: "The family of the context. When multiple charts of a context have different families,
            the netdata server replaces the different parts with [x], so that the context can have only one family."
        title:
          type: string
          description: "The title of the context. When multiple charts of a context have different titles,
            the netdata server replaces the different parts with [x], so that the context can have only one title."
        priority:
          type: number
          description: "The relative priority of the context. When multiple contexts have different priorities,
            the minimum among them is selected as the priority of the context."
        units:
          type: string
          description: "The unit of measurement for the values of all dimensions of the context. If multiple charts
            of context have different units, the latest collected is selected."
        chart_type:
          type: string
          description: The chart type.
          enum:
            - line
            - area
            - stacked
        first_time_t:
          type: number
          description: The UNIX timestamp of the first entry (the oldest) in the database.
        last_time_t:
          type: number
          description: The UNIX timestamp of the latest entry in the database.
        charts:
          type: object
          description: "An object containing all the charts available for the chart. This is used as an indexed array.
            For each pair in the dictionary, the key is the id of the chart and the value provides all details about
            the chart."
    alarm_variables:
      type: object
      properties:
        chart:
          type: string
          description: The unique id of the chart.
        chart_name:
          type: string
          description: The name of the chart.
        cnart_context:
          type: string
          description: The context of the chart. It is shared across multiple monitored
            software or hardware instances and used in alarm templates.
        family:
          type: string
          description: The family of the chart.
        host:
          type: string
          description: The host containing the chart.
        chart_variables:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/chart_variables"
        family_variables:
          type: object
          properties:
            varname1:
              type: number
              format: float
            varname2:
              type: number
              format: float
        host_variables:
          type: object
          properties:
            varname1:
              type: number
              format: float
            varname2:
              type: number
              format: float
    chart_variables:
      type: object
      properties:
        varname1:
          type: number
          format: float
        varname2:
          type: number
          format: float
    jsonwrap2:
      description: |
        Data response with `format=json2`
      type: object
      properties:
        api:
          $ref: '#/components/schemas/api'
        agents:
          $ref: '#/components/schemas/agents'
        versions:
          $ref: '#/components/schemas/versions'
        summary:
          description: |
            Summarized information about nodes, contexts, instances, labels, alerts, and dimensions. The items returned are determined by the scope of the query only, however the statistical data in them are influenced by the filters of the query. Using this information the dashboard allows users to slice and dice the data by filtering and grouping.
          type: object
          properties:
            nodes:
              type: array
              items:
                $ref: '#/components/schemas/nodeWithDataStatistics'
            contexts:
              type: array
              items:
                type: object
                description: |
                  An object describing a unique context. `is` stands for instances, `ds` for dimensions, `al` for alerts, `sts` for statistics.
                properties:
                  id:
                    description: the context id.
                    type: string
                  is:
                    $ref: "#/components/schemas/jsonwrap2_items_count"
                  ds:
                    $ref: "#/components/schemas/jsonwrap2_items_count"
                  al:
                    $ref: "#/components/schemas/jsonwrap2_alerts_count"
                  sts:
                    oneOf:
                      - $ref: "#/components/schemas/jsonwrap2_sts"
                      - $ref: "#/components/schemas/jsonwrap2_sts_raw"
            instances:
              type: array
              items:
                type: object
                description: |
                  An object describing an instance. `ds` stands for dimensions, `al` for alerts, `sts` for statistics.
                properties:
                  id:
                    description: the id of the instance.
                    type: string
                  nm:
                    description: the name of the instance (may be absent when it is the same with the id)
                    type: string
                  ni:
                    description: the node index id this instance belongs to. The UI uses this to compone the fully qualified name of the instance, using the node hostname to present it to users and its machine guid to add it to filters.
                  ds:
                    $ref: "#/components/schemas/jsonwrap2_items_count"
                  al:
                    $ref: "#/components/schemas/jsonwrap2_alerts_count"
                  sts:
                    oneOf:
                      - $ref: "#/components/schemas/jsonwrap2_sts"
                      - $ref: "#/components/schemas/jsonwrap2_sts_raw"
            dimensions:
              type: array
              items:
                type: object
                description: |
                  An object describing a unique dimension. `ds` stands for `dimensions`, `sts` for statistics.
                properties:
                  id:
                    description: the id of the dimension.
                    type: string
                  nm:
                    description: the name of the dimension (may be absent when it is the same with the id)
                    type: string
                  ds:
                    $ref: "#/components/schemas/jsonwrap2_items_count"
                  sts:
                    oneOf:
                      - $ref: "#/components/schemas/jsonwrap2_sts"
                      - $ref: "#/components/schemas/jsonwrap2_sts_raw"
            labels:
              type: array
              items:
                type: object
                description: |
                  An object describing a label key. `ds` stands for `dimensions`, `sts` for statistics.
                properties:
                  id:
                    description: the key of the label.
                    type: string
                  ds:
                    $ref: "#/components/schemas/jsonwrap2_items_count"
                  sts:
                    oneOf:
                      - $ref: "#/components/schemas/jsonwrap2_sts"
                      - $ref: "#/components/schemas/jsonwrap2_sts_raw"
                  vl:
                    description: |
                      An array of values for this key.
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          description: The value string
                          type: string
                        ds:
                          $ref: "#/components/schemas/jsonwrap2_items_count"
                        sts:
                          oneOf:
                            - $ref: "#/components/schemas/jsonwrap2_sts"
                            - $ref: "#/components/schemas/jsonwrap2_sts_raw"
            alerts:
              description: |
                An array of all the unique alerts running, grouped by alert name (`nm` is available here)
              type: array
              items:
                $ref: "#/components/schemas/jsonwrap2_alerts_count"
        totals:
          type: object
          properties:
            nodes:
              $ref: "#/components/schemas/jsonwrap2_items_count"
            contexts:
              $ref: "#/components/schemas/jsonwrap2_items_count"
            instances:
              $ref: "#/components/schemas/jsonwrap2_items_count"
            dimensions:
              $ref: "#/components/schemas/jsonwrap2_items_count"
            label_keys:
              $ref: "#/components/schemas/jsonwrap2_items_count"
            label_key_values:
              $ref: "#/components/schemas/jsonwrap2_items_count"
        functions:
          type: array
          items:
            type: string
        db:
          type: object
          properties:
            tiers:
              description: |
                The number of tiers this server is using.
              type: integer
            update_every:
              description: |
                The minimum update every, in seconds, for all tiers and all metrics aggregated into this query.
              type: integer
            first_entry:
              description: |
                The minimum unix epoch timestamp of the retention across all tiers for all metrics aggregated into this query.
              type: integer
            last_entry:
              description: |
                The maximum unix epoch timestamp of the retention across all tier for all metrics aggregated into this query.
              type: integer
            per_tier:
              description: |
                An array with information for each of the tiers available, related to this query.
              type: array
              items:
                type: object
                properties:
                  tier:
                    description: |
                      The tier number of this tier, starting at 0.
                    type: integer
                  queries:
                    description: |
                      The number of queries executed on this tier. Usually one query per metric is made, but the query may cross multiple tier, in which case more than one query per metric is made.
                    type: integer
                  points:
                    description: |
                      The number of points read from this tier.
                    type: integer
                  update_every:
                    description: |
                      The minimum resolution of all metrics queried on this tier.
                    type: integer
                  first_entry:
                    description: |
                      The minimum unix epoch timestamp available across all metrics that used this tier. This reflects the oldest timestamp of the tier's retention.
                    type: integer
                  last_entry:
                    description: |
                      The maximum unix epoch timestamp available across all metrics that used this tier. This reflects the newest timestamp of the tier's retention.
        view:
          type: object
          properties:
            title:
              description: |
                The title the chart should have.
              type: string
            format:
              description: |
                The format the `result` top level member has. Available on when `debug` flag is set.
              type: string
            options:
              description: |
                An array presenting all the options given to the query. Available on when `debug` flag is set.
              type: array
              items:
                type: string
            time_group:
              description: |
                The same as the parameter `time_group`. Available on when `debug` flag is set.
              type: string
            after:
              description: |
                The oldest unix epoch timestamp of the data returned in the `result`.
              type: integer
            before:
              description: |
                The newest unix epoch timestamp of the data returned in the `result`.
              type: integer
            partial_data_trimming:
              description: |
                Information related to trimming of the last few points of the `result`, that was required to remove (increasing) partial data.
                Trimming is disabled when the `raw` option is given to the query.
                This object is available only when the `debug` flag is set.
              type: object
              properties:
                max_update_every:
                  description: |
                    The maximum `update_every` for all metrics aggregated into the query.
                    Trimming is by default enabled at `view.before - max_update_every`, but only when `view.before >= now - max_update_every`.
                  type: integer
                expected_after:
                  description: |
                    The timestamp at which trimming can be enabled.
                    If this timestamp is greater or equal to `view.before`, there is no trimming.
                  type: integer
                trimmed_after:
                  description: |
                    The timestamp at which trimming has been applied.
                    If this timestamp is greater or equal to `view.before`, there is no trimming.
            points:
              description: |
                The number of points in `result`. Available only when `raw` is given.
              type: integer
            units:
              description: |
                The units of the query.
              oneOf:
                - type: string
                - type: array
                  items:
                    type: string
            chart_type:
              description: |
                The default chart type of the query.
              type: string
              enum:
                - line
                - area
                - stacked
            dimensions:
              description: |
                Detailed information about the chart dimensions included in the `result`.
              type: object
              properties:
                grouped_by:
                  description: |
                    An array with the order of the groupings performed.
                  type: array
                  items:
                    type: string
                    enum:
                      - selected
                      - dimension
                      - instance
                      - node
                      - context
                      - units
                      - "label:key1"
                      - "label:key2"
                      - "label:keyN"
                ids:
                  description: |
                    An array with the dimension ids that uniquely identify the dimensions for this query.
                  type: array
                  items:
                    type: string
                names:
                  description: |
                    An array with the dimension names to be presented to users. Names may be overlapping, but IDs are not.
                  type: array
                  items:
                    type: string
                units:
                  description: |
                    An array with the units each dimension has.
                  type: array
                  items:
                    type: string
                priorities:
                  description: |
                    An array with the relative priorities of the dimensions.
                    Numbers may not be sequential or unique. The application is expected to order by this and then by name.
                  type: array
                  items:
                    type: integer
                aggregated:
                  description: |
                    An array with the number of source metrics aggregated into each dimension.
                  type: array
                  items:
                    type: integer
                min:
                  description: |
                    An array of the minimum value of each dimension across the entire query.
                  type: array
                  items:
                    type: number
                max:
                  description: |
                    An array of the maximum value of each dimension across the entire query.
                  type: array
                  items:
                    type: number
                avg:
                  description: |
                    An array of the average value of each dimension across the entire query.
                  type: array
                  items:
                    type: number
                sts:
                  description: |
                    Statistics about the data collection points used for each dimension.
                  type: object
                  properties:
                    min:
                      description: |
                        An array with the minimum data collection value aggregated to each dimension.
                      type: array
                      items:
                        type: number
                    max:
                      description: |
                        An array with the maximum data collection value aggregated to each dimension.
                      type: array
                      items:
                        type: number
                    sum:
                      description: |
                        An array with the sum of all data collection values aggregated to each dimension.
                        This member exists only when option `raw` is given.
                      type: array
                      items:
                        type: number
                    cnt:
                      description: |
                        An array with the count of the data collection values aggregated to each dimension.
                        This member exists only when option `raw` is given.
                      type: array
                      items:
                        type: number
                    ars:
                      description: |
                        An array with the anomaly rate sum of all data collection values aggregated to each dimension.
                        This member exists only when option `raw` is given.
                      type: array
                      items:
                        type: number
                    avg:
                      description: |
                        An array with the average of all data collection values aggregated to each dimension.
                        This member exists only when option `raw` is not given. When option `raw` is given, the average can be calculated by dividing `sum` with `cnt`.
                      type: array
                      items:
                        type: number
                    arp:
                      description: |
                        An array with the average anomaly rate of all data collection values aggregated to each dimension.
                        This member exists only when option `raw` is not given. When option `raw` is given, the average can be calculated by dividing `ars` with `cnt`.
                      type: array
                      items:
                        type: number
                    con:
                      description: |
                        An array with the contribution % of all data collection values aggregated to each dimension.
                        This member exists only when option `raw` is not given. When option `raw` is given, the contribution can be calculated by multiplying `ABS(sum)` with 100.0 and dividing it with the total of the ABS(sum) of all dimensions.
                      type: array
                      items:
                        type: number
                labels:
                  description: |
                    The labels associated with each dimension in the query.
                    This object is only available when the `group-by-labels` option is given to the query.
                  type: object
                  properties:
                    label_key1:
                      description: |
                        An array having one entry for each of the dimensions of the query.
                      type: array
                      items:
                        description: |
                          An array having one entry for each of the values this label key has for the given dimension.
                        type: array
                        items:
                          type: string
            min:
              description: |
                The minimum value of all points included in the `result`.
              type: number
            max:
              description: |
                The maximum value of all points included in the `result`.
              type: number
        result:
          $ref: '#/components/schemas/data_json_formats2'
        timings:
          type: object
    jsonwrap2_sts:
      description: |
        Statistical values
      type: object
      properties:
        min:
          description: The minimum value of all metrics aggregated
          type: number
        max:
          description: The maximum value of all metrics aggregated
          type: number
        avg:
          description: The average value of all metrics aggregated
          type: number
        arp:
          description: The average anomaly rate of all metrics aggregated
          type: number
        con:
          description: The contribution percentage of all the metrics aggregated
          type: number
    jsonwrap2_sts_raw:
      description: |
        Statistical values when `raw` option is given.
      type: object
      properties:
        min:
          description: The minimum value of all metrics aggregated
          type: number
        max:
          description: The maximum value of all metrics aggregated
          type: number
        sum:
          description: The sum value of all metrics aggregated
          type: number
        ars:
          description: The sum anomaly rate of all metrics aggregated
          type: number
        vol:
          description: The volume of all the metrics aggregated
          type: number
        cnt:
          description: The count of all metrics aggregated
          type: integer
    jsonwrap2_items_count:
      description: |
        Depending on the placement of this object, `items` may be `nodes`, `contexts`, `instances`, `dimensions`, `label keys`, `label key-value pairs`. Furthermore, if the whole object is missing it should be assumed that all its members are zero.
      type: object
      properties:
        sl:
          description: The number of items `selected` to query. If absent it is zero.
          type: integer
        ex:
          description: The number of items `excluded` from querying. If absent it is zero.
          type: integer
        qr:
          description: The number of items (out of `selected`) the query successfully `queried`.  If absent it is zero.
          type: integer
        fl:
          description: The number of items (from `selected`) that `failed` to be queried.  If absent it is zero.
          type: integer
    jsonwrap2_alerts_count:
      description: |
        Counters about alert statuses. If this object is missing, it is assumed that all its members are zero.
      type: object
      properties:
        nm:
          description: The name of the alert. Can be absent when the counters refer to more than one alert instances.
          type: string
        cl:
          description: The number of CLEAR alerts. If absent, it is zero.
          type: integer
        wr:
          description: The number of WARNING alerts. If absent, it is zero.
          type: integer
        cr:
          description: The number of CRITICAL alerts. If absent, it is zero.
          type: integer
        ot:
          description: |
            The number of alerts that are not CLEAR, WARNING, CRITICAL (so, they are "other").  If absent, it is zero.
          type: integer
    api:
      description: The version of the API used.
      type: integer
    agents:
      description: |
        An array of agent definitions consulted to compose this response.
      type: array
      items:
        type: object
        properties:
          mg:
            description: The agent machine GUID.
            type: string
            format: uuid
          nd:
            description: The agent cloud node ID.
            type: string
            format: uuid
          nm:
            description: The agent hostname.
            type: string
          ai:
            description: The agent index ID for this agent, in this response.
            type: integer
          now:
            description: The current unix epoch timestamp of this agent.
            type: integer
    versions:
      description: |
        Hashes that allow the caller to detect important database changes of Netdata agents.
      type: object
      properties:
        nodes_hard_hash:
          description: |
            An auto-increment value that reflects the number of changes to the number of nodes maintained by the server. Everytime a node is added or removed, this number gets incremented.
          type: integer
        contexts_hard_hash:
          description: |
            An auto-increment value that reflects the number of changes to the number of contexts maintained by the server. Everytime a context is added or removed, this number gets incremented.
          type: integer
        contexts_soft_hash:
          description: |
            An auto-increment value that reflects the number of changes to the queue that sends contexts updates to Netdata Cloud. Everytime the contents of a context are updated, this number gets incremented.
          type: integer
        alerts_hard_hash:
          description: |
            An auto-increment value that reflects the number of changes to the number of alerts. Everytime an alert is added or removed, this number gets incremented.
          type: integer
        alerts_soft_hash:
          description: |
            An auto-increment value that reflects the number of alerts transitions. Everytime an alert transitions to a new state, this number gets incremented.
          type: integer
    nodeBasic:
      type: object
      description: Basic information about a node.
      required:
        - ni
        - st
      properties:
        mg:
          description: The machine guid of the node. May not be available if the request is served by the Netdata Cloud.
          type: string
          format: UUID
        nd:
          description: The node id of the node. May not be available if the node is not registered to Netdata Cloud.
          type: string
          format: UUID
        nm:
          description: The name (hostname) of the node.
          type: string
        ni:
          description: The node index id, a number that uniquely identifies this node for this query.
          type: integer
        st:
          description: Status information about the communication with this node.
          type: object
          properties:
            ai:
              description: The agent index id that has been contacted for this node.
              type: integer
            code:
              description: The HTTP response code of the response for this node. When working directly with an agent, this is always 200. If the `code` is missing, it should be assumed to be 200.
              type: integer
            msg:
              description: A human readable description of the error, if any. If `msg` is missing, or is the empty string `""` or is `null`, there is no description associated with the current status.
              type: string
            ms:
              description: The time in milliseconds this node took to respond, or if the local agent responded for this node, the time it needed to execute the query. If `ms` is missing, the time that was required to query this node is unknown.
              type: number
    nodeWithDataStatistics:
      allOf:
        - $ref: '#/components/schemas/nodeBasic'
        - type: object
          description: |
            `is` stands for instances, `ds` for dimensions, `al` for alerts, `sts` for statistics.
          properties:
            is:
              $ref: "#/components/schemas/jsonwrap2_items_count"
            ds:
              $ref: "#/components/schemas/jsonwrap2_items_count"
            al:
              $ref: "#/components/schemas/jsonwrap2_alerts_count"
            sts:
              oneOf:
                - $ref: "#/components/schemas/jsonwrap2_sts"
                - $ref: "#/components/schemas/jsonwrap2_sts_raw"
    nodeFull:
      allOf:
        - $ref: '#/components/schemas/nodeBasic'
        - type: object
          properties:
            version:
              description: The version of the Netdata Agent the node runs.
              type: string
            hops:
              description: How many hops away from the origin node, the queried one is. 0 means the agent itself is the origin node.
              type: integer
            state:
              description: The current state of the node on this agent.
              type: string
              enum:
                - reachable
                - stale
                - offline
    context2Basic:
      type: object
      properties:
        family:
          type: string
        priority:
          type: integer
        first_entry:
          type: integer
        last_entry:
          type: integer
        live:
          type: boolean
    contexts2:
      description: |
        `/api/v2/contexts` and `/api/v2/q` response about multi-node contexts hosted by a Netdata agent.
      type: object
      properties:
        api:
          $ref: '#/components/schemas/api'
        agents:
          $ref: '#/components/schemas/agents'
        versions:
          $ref: '#/components/schemas/versions'
        contexts:
          additionalProperties:
            $ref: '#/components/schemas/context2Basic'
    jsonwrap1:
      type: object
      discriminator:
        propertyName: format
      description: Response will contain the appropriate subtype, e.g. data_json depending
        on the requested format.
      properties:
        api:
          type: number
          description: The API version this conforms to.
        id:
          type: string
          description: The unique id of the chart.
        name:
          type: string
          description: The name of the chart.
        update_every:
          type: number
          description: The update frequency of this chart, in seconds. One value every this
            amount of time is kept in the round robin database (independently of
            the current view).
        view_update_every:
          type: number
          description: The current view appropriate update frequency of this chart, in
            seconds. There is no point to request chart refreshes, using the
            same settings, more frequently than this.
        first_entry:
          type: number
          description: The UNIX timestamp of the first entry (the oldest) in the round
            robin database (independently of the current view).
        last_entry:
          type: number
          description: The UNIX timestamp of the latest entry in the round robin database
            (independently of the current view).
        after:
          type: number
          description: The UNIX timestamp of the first entry (the oldest) returned in this
            response.
        before:
          type: number
          description: The UNIX timestamp of the latest entry returned in this response.
        min:
          type: number
          description: The minimum value returned in the current view. This can be used to
            size the y-series of the chart.
        max:
          type: number
          description: The maximum value returned in the current view. This can be used to
            size the y-series of the chart.
        dimension_names:
          description: The dimension names of the chart as returned in the current view.
          type: array
          items:
            type: string
        dimension_ids:
          description: The dimension IDs of the chart as returned in the current view.
          type: array
          items:
            type: string
        latest_values:
          description: The latest values collected for the chart (independently of the
            current view).
          type: array
          items:
            type: string
        view_latest_values:
          description: The latest values returned with this response.
          type: array
          items:
            type: string
        dimensions:
          type: number
          description: The number of dimensions returned.
        points:
          type: number
          description: The number of rows / points returned.
        format:
          type: string
          description: The format of the result returned.
        chart_variables:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/chart_variables'
        result:
          $ref: '#/components/schemas/data_json_formats1'
    data_json_formats1:
      description: |
        Depending on the `format` given to a data query, any of the following may be returned.
      oneOf:
        - $ref: '#/components/schemas/data_json'
        - $ref: '#/components/schemas/data_datatable'
        - $ref: '#/components/schemas/data_csvjsonarray'
        - $ref: '#/components/schemas/data_array'
        - $ref: '#/components/schemas/data_txt'
    data_json_formats2:
      description: |
        Depending on the `format` given to a data query, any of the following may be returned.
      oneOf:
        - $ref: '#/components/schemas/data_json2'
        - $ref: '#/components/schemas/data_json_formats1'
    data_json2:
      type: object
      properties:
        labels:
          description: |
            The IDs of the dimensions returned. The first is always `time`.
          type: array
          items:
            type: string
        point:
          description: |
            The format of each point returned.
          type: object
          properties:
            value:
              description: |
                The index of the value in each point.
              type: integer
            arp:
              description: |
                The index of the anomaly rate in each point.
              type: integer
            pa:
              description: |
                The index of the point annotations in each point.
                This is a bitmap. `EMPTY = 1`, `RESET = 2`, `PARTIAL = 4`.
                `EMPTY` means the point has no value.
                `RESET` means that at least one metric aggregated experienced an overflow (a counter that wrapped).
                `PARTIAL` means that this point should have more metrics aggregated into it, but not all metrics had data.
              type: integer
            count:
              description: |
                The number of metrics aggregated into this point. This exists only when the option `raw` is given to the query.
              type: integer
        data:
          type: array
          items:
            allOf:
              - type: integer
              - type: array
    data_json:
      description: Data response in `json` format.
      type: object
      properties:
        labels:
          description: The dimensions retrieved from the chart.
          type: array
          items:
            type: string
        data:
          description: |
            The data requested, one element per sample with each element containing the values of the dimensions described in the labels value.
          type: array
          items:
            type: number
    data_txt:
      description: |
        Data response in `csv`, `tsv`, `tsv-excel`, `ssv`, `ssv-comma`, `markdown`, `html` formats.
      type: string
    data_array:
      description: Data response in `array` format.
      type: array
      items:
        type: number
    data_csvjsonarray:
      description: |
        The first inner array contains strings showing the labels of each column, each subsequent array contains the values for each point in time.
      type: array
      items:
        type: array
        items: {}
    data_datatable:
      description: |
        Data response in datatable / datasource formats (suitable for Google Charts).
      type: object
      properties:
        cols:
          type: array
          items:
            type: object
            properties:
              id:
                description: Always empty - for future use.
              label:
                description: The dimension returned from the chart.
              pattern:
                description: Always empty - for future use.
              type:
                description: The type of data in the column / chart-dimension.
              p:
                description: Contains any annotations for the column.
            required:
              - id
              - label
              - pattern
              - type
        rows:
          type: array
          items:
            type: object
            properties:
              c:
                type: array
                items:
                  properties:
                    v:
                      description: |
                        Each value in the row is represented by an object named `c` with five v fields: data, null, null, 0, the value. This format is fixed by the Google Charts API."
    alarms:
      type: object
      properties:
        hostname:
          type: string
        latest_alarm_log_unique_id:
          type: integer
          format: int32
        status:
          type: boolean
        now:
          type: integer
          format: int32
        alarms:
          type: object
          properties:
            chart-name.alarm-name:
              type: object
              properties:
                id:
                  type: integer
                  format: int32
                name:
                  type: string
                  description: Full alarm name.
                chart:
                  type: string
                family:
                  type: string
                active:
                  type: boolean
                  description: Will be false only if the alarm is disabled in the
                    configuration.
                disabled:
                  type: boolean
                  description: Whether the health check for this alarm has been disabled
                    via a health command API DISABLE command.
                silenced:
                  type: boolean
                  description: Whether notifications for this alarm have been silenced via
                    a health command API SILENCE command.
                exec:
                  type: string
                recipient:
                  type: string
                source:
                  type: string
                units:
                  type: string
                info:
                  type: string
                status:
                  type: string
                last_status_change:
                  type: integer
                  format: int32
                last_updated:
                  type: integer
                  format: int32
                next_update:
                  type: integer
                  format: int32
                update_every:
                  type: integer
                  format: int32
                delay_up_duration:
                  type: integer
                  format: int32
                delay_down_duration:
                  type: integer
                  format: int32
                delay_max_duration:
                  type: integer
                  format: int32
                delay_multiplier:
                  type: integer
                  format: int32
                delay:
                  type: integer
                  format: int32
                delay_up_to_timestamp:
                  type: integer
                  format: int32
                value_string:
                  type: string
                no_clear_notification:
                  type: boolean
                lookup_dimensions:
                  type: string
                db_after:
                  type: integer
                  format: int32
                db_before:
                  type: integer
                  format: int32
                lookup_method:
                  type: string
                lookup_after:
                  type: integer
                  format: int32
                lookup_before:
                  type: integer
                  format: int32
                lookup_options:
                  type: string
                calc:
                  type: string
                calc_parsed:
                  type: string
                warn:
                  type: string
                warn_parsed:
                  type: string
                crit:
                  type: string
                crit_parsed:
                  type: string
                warn_repeat_every:
                  type: integer
                  format: int32
                crit_repeat_every:
                  type: integer
                  format: int32
                green:
                  type: string
                  format: nullable
                red:
                  type: string
                  format: nullable
                value:
                  type: number
    alarm_log_entry:
      type: object
      properties:
        hostname:
          type: string
        unique_id:
          type: integer
          format: int32
        alarm_id:
          type: integer
          format: int32
        alarm_event_id:
          type: integer
          format: int32
        name:
          type: string
        chart:
          type: string
        family:
          type: string
        processed:
          type: boolean
        updated:
          type: boolean
        exec_run:
          type: integer
          format: int32
        exec_failed:
          type: boolean
        exec:
          type: string
        recipient:
          type: string
        exec_code:
          type: integer
          format: int32
        source:
          type: string
        units:
          type: string
        when:
          type: integer
          format: int32
        duration:
          type: integer
          format: int32
        non_clear_duration:
          type: integer
          format: int32
        status:
          type: string
        old_status:
          type: string
        delay:
          type: integer
          format: int32
        delay_up_to_timestamp:
          type: integer
          format: int32
        updated_by_id:
          type: integer
          format: int32
        updates_id:
          type: integer
          format: int32
        value_string:
          type: string
        old_value_string:
          type: string
        silenced:
          type: string
        info:
          type: string
        value:
          type: number
          nullable: true
        old_value:
          type: number
          nullable: true
    alarms_values:
      type: object
      properties:
        hostname:
          type: string
        alarms:
          type: object
          description: HashMap with keys being alarm names
          additionalProperties:
            type: object
            properties:
              id:
                type: integer
              value:
                type: integer
              last_updated:
                type: integer
                format: int32
              status:
                type: string
                enum:
                  - REMOVED
                  - UNDEFINED
                  - UNINITIALIZED
                  - CLEAR
                  - RAISED
                  - WARNING
                  - CRITICAL
                  - UNKNOWN
    aclk_state:
      type: object
      properties:
        aclk-available:
          type: string
          description: |
            Describes whether this agent is capable of connection to the Cloud. False means agent has been built without ACLK component either on purpose (user choice) or due to missing dependency.
        aclk-version:
          type: integer
          description: Describes which ACLK version is currently used.
        protocols-supported:
          type: array
          description: List of supported protocols for communication with Cloud.
          items:
            type: string
        agent-claimed:
          type: boolean
          description: Informs whether this agent has been added to a space in the cloud (User has to perform claiming).
            If false (user didn't perform claiming) agent will never attempt any cloud connection.
        claimed_id:
          type: string
          format: uuid
          description: Unique ID this agent uses to identify when connecting to cloud
        online:
          type: boolean
          description: Informs if this agent was connected to the cloud at the time this request has been processed.
        used-cloud-protocol:
          type: string
          description: Informs which protocol is used to communicate with cloud
          enum:
            - Old
            - New
    metric_correlations:
      type: object
      properties:
        after:
          description: the start time of the highlighted window
          type: integer
        before:
          description: the end time of the highlighted window
          type: integer
        duration:
          description: the duration of the highlighted window
          type: integer
        points:
          description: the points of the highlighted window
          type: integer
        baseline_after:
          description: the start time of the baseline window
          type: integer
        baseline_before:
          description: the end time of the baseline window
          type: integer
        baseline_duration:
          description: the duration of the baseline window
          type: integer
        baseline_points:
          description: the points of the baseline window
          type: integer
        group:
          description: the grouping method across time
          type: string
        method:
          description: the correlation method used
          type: string
        options:
          description: a comma separated list of the query options set
          type: string
        correlated_dimensions:
          description: the number of dimensions returned in the result
        total_dimensions_count:
          description: the total number of dimensions evaluated
          type: integer
        statistics:
          type: object
          properties:
            query_time_ms:
              type: number
            db_queries:
              type: integer
            db_points_read:
              type: integer
            query_result_points:
              type: integer
            binary_searches:
              type: integer
        correlated_charts:
          type: object
          description: An object containing chart objects with their metrics correlations.
          properties:
            chart-id1:
              type: object
              properties:
                context:
                  type: string
                dimensions:
                  type: object
                  properties:
                    dimension1-name:
                      type: number
                    dimension2-name:
                      type: number
            chart-id2:
              type: object
              properties:
                context:
                  type: string
                dimensions:
                  type: object
                  properties:
                    dimension1-name:
                      type: number
                    dimension2-name:
                      type: number
    weights2:
      type: object
    weights:
      type: object
      properties:
        after:
          description: the start time of the highlighted window
          type: integer
        before:
          description: the end time of the highlighted window
          type: integer
        duration:
          description: the duration of the highlighted window
          type: integer
        points:
          description: the points of the highlighted window
          type: integer
        baseline_after:
          description: the start time of the baseline window
          type: integer
        baseline_before:
          description: the end time of the baseline window
          type: integer
        baseline_duration:
          description: the duration of the baseline window
          type: integer
        baseline_points:
          description: the points of the baseline window
          type: integer
        group:
          description: the grouping method across time
          type: string
        method:
          description: the correlation method used
          type: string
        options:
          description: a comma separated list of the query options set
          type: string
        correlated_dimensions:
          description: the number of dimensions returned in the result
        total_dimensions_count:
          description: the total number of dimensions evaluated
          type: integer
        statistics:
          type: object
          properties:
            query_time_ms:
              type: number
            db_queries:
              type: integer
            db_points_read:
              type: integer
            query_result_points:
              type: integer
            binary_searches:
              type: integer
        contexts:
          description: A dictionary of weighted context objects.
          type: object
          additionalProperties:
            $ref: '#/components/schemas/weighted_context'
    weighted_context:
      type: object
      properties:
        weight:
          description: The average weight of the context.
          type: number
        charts:
          description: A dictionary of weighted chart objects.
          type: object
          additionalProperties:
            $ref: '#/components/schemas/weighted_chart'
    weighted_chart:
      type: object
      properties:
        weight:
          description: The average weight of the context.
          type: number
        dimensions:
          description: A dictionary of weighted dimensions.
          type: object
          additionalProperties:
            $ref: '#/components/schemas/weighted_dimension'
    weighted_dimension:
      type: number
