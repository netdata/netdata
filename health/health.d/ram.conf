
# you can disable an alarm notification by setting the 'to' line to: silent

    alarm: ram_in_use
       on: system.ram
    class: Utilization
     type: System
component: Memory
       os: linux
    hosts: *
     calc: $used * 100 / ($used + $cached + $free + $buffers)
    units: %
    every: 10s
     warn: $this > (($status >= $WARNING)  ? (80) : (90))
     crit: $this > (($status == $CRITICAL) ? (90) : (98))
    delay: down 15m multiplier 1.5 max 1h
     info: system memory utilization
       to: sysadmin

    alarm: ram_available
       on: mem.available
    class: Utilization
     type: System
component: Memory
       os: linux
    hosts: *
     calc: $avail * 100 / ($system.ram.used + $system.ram.cached + $system.ram.free + $system.ram.buffers)
    units: %
    every: 10s
     warn: $this < (($status >= $WARNING)  ? (15) : (10))
    delay: down 15m multiplier 1.5 max 1h
     info: percentage of estimated amount of RAM available for userspace processes, without causing swapping
       to: silent

      alarm: oom_kill
         on: mem.oom_kill
         os: linux
      hosts: *
     lookup: sum -30m unaligned
      units: kills
      every: 5m
       warn: $this > 0
      delay: down 10m
       info: number of out of memory kills in the last 30 minutes
         to: silent

## FreeBSD
    alarm: ram_in_use
       on: system.ram
    class: Utilization
     type: System
component: Memory
       os: freebsd
    hosts: *
     calc: ($active + $wired + $laundry + $buffers) * 100 / ($active + $wired + $laundry + $buffers + $cache + $free + $inactive)
    units: %
    every: 10s
     warn: $this > (($status >= $WARNING)  ? (80) : (90))
     crit: $this > (($status == $CRITICAL) ? (90) : (98))
    delay: down 15m multiplier 1.5 max 1h
     info: system memory utilization
       to: sysadmin

    alarm: ram_available
       on: mem.available
    class: Utilization
     type: System
component: Memory
       os: freebsd
    hosts: *
     calc: $avail * 100 / ($system.ram.free + $system.ram.active + $system.ram.inactive + $system.ram.wired + $system.ram.cache + $system.ram.laundry + $system.ram.buffers)
    units: %
    every: 10s
     warn: $this < (($status >= $WARNING)  ? (15) : (10))
    delay: down 15m multiplier 1.5 max 1h
     info: percentage of estimated amount of RAM available for userspace processes, without causing swapping
       to: silent
