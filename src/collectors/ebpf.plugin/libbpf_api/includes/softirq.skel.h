/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __SOFTIRQ_BPF_SKEL_H__
#define __SOFTIRQ_BPF_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct softirq_bpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *tbl_softirq;
	} maps;
	struct {
		struct bpf_program *netdata_softirq_entry;
		struct bpf_program *netdata_softirq_exit;
	} progs;
	struct {
		struct bpf_link *netdata_softirq_entry;
		struct bpf_link *netdata_softirq_exit;
	} links;

#ifdef __cplusplus
	static inline struct softirq_bpf *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct softirq_bpf *open_and_load();
	static inline int load(struct softirq_bpf *skel);
	static inline int attach(struct softirq_bpf *skel);
	static inline void detach(struct softirq_bpf *skel);
	static inline void destroy(struct softirq_bpf *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
softirq_bpf__destroy(struct softirq_bpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
softirq_bpf__create_skeleton(struct softirq_bpf *obj);

static inline struct softirq_bpf *
softirq_bpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct softirq_bpf *obj;
	int err;

	obj = (struct softirq_bpf *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = softirq_bpf__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	softirq_bpf__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct softirq_bpf *
softirq_bpf__open(void)
{
	return softirq_bpf__open_opts(NULL);
}

static inline int
softirq_bpf__load(struct softirq_bpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct softirq_bpf *
softirq_bpf__open_and_load(void)
{
	struct softirq_bpf *obj;
	int err;

	obj = softirq_bpf__open();
	if (!obj)
		return NULL;
	err = softirq_bpf__load(obj);
	if (err) {
		softirq_bpf__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
softirq_bpf__attach(struct softirq_bpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
softirq_bpf__detach(struct softirq_bpf *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *softirq_bpf__elf_bytes(size_t *sz);

static inline int
softirq_bpf__create_skeleton(struct softirq_bpf *obj)
{
	struct bpf_object_skeleton *s;
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "softirq_bpf";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 1;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	s->maps[0].name = "tbl_softirq";
	s->maps[0].map = &obj->maps.tbl_softirq;

	/* programs */
	s->prog_cnt = 2;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "netdata_softirq_entry";
	s->progs[0].prog = &obj->progs.netdata_softirq_entry;
	s->progs[0].link = &obj->links.netdata_softirq_entry;

	s->progs[1].name = "netdata_softirq_exit";
	s->progs[1].prog = &obj->progs.netdata_softirq_exit;
	s->progs[1].link = &obj->links.netdata_softirq_exit;

	s->data = softirq_bpf__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *softirq_bpf__elf_bytes(size_t *sz)
{
	static const char data[] __attribute__((__aligned__(8))) = "\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x18\x0e\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x0f\0\
\x01\0\x61\x11\x08\0\0\0\0\0\x63\x1a\xec\xff\0\0\0\0\x25\x01\x16\0\x09\0\0\0\
\xbf\xa2\0\0\0\0\0\0\x07\x02\0\0\xec\xff\xff\xff\x18\x01\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x85\0\0\0\x01\0\0\0\xbf\x06\0\0\0\0\0\0\x15\x06\x03\0\0\0\0\0\x85\0\0\0\
\x05\0\0\0\x7b\x06\x08\0\0\0\0\0\x05\0\x0c\0\0\0\0\0\xb7\x01\0\0\0\0\0\0\x7b\
\x1a\xf0\xff\0\0\0\0\x85\0\0\0\x05\0\0\0\x7b\x0a\xf8\xff\0\0\0\0\xbf\xa2\0\0\0\
\0\0\0\x07\x02\0\0\xec\xff\xff\xff\xbf\xa3\0\0\0\0\0\0\x07\x03\0\0\xf0\xff\xff\
\xff\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb7\x04\0\0\0\0\0\0\x85\0\0\0\x02\0\0\
\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\x61\x11\x08\0\0\0\0\0\x63\x1a\xfc\xff\0\
\0\0\0\x25\x01\x11\0\x09\0\0\0\xbf\xa2\0\0\0\0\0\0\x07\x02\0\0\xfc\xff\xff\xff\
\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85\0\0\0\x01\0\0\0\xbf\x06\0\0\0\0\0\0\
\x15\x06\x0a\0\0\0\0\0\x85\0\0\0\x05\0\0\0\x79\x61\x08\0\0\0\0\0\x1f\x10\0\0\0\
\0\0\0\x37\0\0\0\xe8\x03\0\0\xbf\x01\0\0\0\0\0\0\xdb\x16\0\0\0\0\0\0\x79\x61\0\
\0\0\0\0\0\xa7\x01\0\0\xff\xff\xff\xff\x2d\x01\x01\0\0\0\0\0\x7b\x06\0\0\0\0\0\
\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x47\x50\x4c\0\x9f\xeb\x01\0\x18\0\0\0\0\0\0\0\x54\x02\
\0\0\x54\x02\0\0\x68\x03\0\0\0\0\0\0\0\0\0\x02\x03\0\0\0\x01\0\0\0\0\0\0\x01\
\x04\0\0\0\x20\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\x06\0\0\0\
\x05\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\x02\x06\0\0\0\x19\0\0\0\
\0\0\0\x08\x07\0\0\0\x1f\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\x02\
\x09\0\0\0\x2c\0\0\0\0\0\0\x08\x0a\0\0\0\x3a\0\0\0\x02\0\0\x04\x10\0\0\0\x46\0\
\0\0\x0b\0\0\0\0\0\0\0\x4e\0\0\0\x0b\0\0\0\x40\0\0\0\x51\0\0\0\0\0\0\x08\x0c\0\
\0\0\x55\0\0\0\0\0\0\x08\x0d\0\0\0\x5b\0\0\0\0\0\0\x01\x08\0\0\0\x40\0\0\0\0\0\
\0\0\0\0\0\x02\x0f\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\x0a\0\0\
\0\0\0\0\0\x04\0\0\x04\x20\0\0\0\x6e\0\0\0\x01\0\0\0\0\0\0\0\x73\0\0\0\x05\0\0\
\0\x40\0\0\0\x77\0\0\0\x08\0\0\0\x80\0\0\0\x7d\0\0\0\x0e\0\0\0\xc0\0\0\0\x89\0\
\0\0\0\0\0\x0e\x10\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x02\x13\0\0\0\x95\0\0\0\x02\0\
\0\x04\x10\0\0\0\xab\0\0\0\x0b\0\0\0\0\0\0\0\xaf\0\0\0\x14\0\0\0\x40\0\0\0\xb3\
\0\0\0\0\0\0\x08\x06\0\0\0\0\0\0\0\x01\0\0\x0d\x02\0\0\0\xb7\0\0\0\x12\0\0\0\
\x95\0\0\0\x01\0\0\x0c\x15\0\0\0\0\0\0\0\0\0\0\x02\x18\0\0\0\x25\x02\0\0\x02\0\
\0\x04\x10\0\0\0\xab\0\0\0\x0b\0\0\0\0\0\0\0\xaf\0\0\0\x14\0\0\0\x40\0\0\0\0\0\
\0\0\x01\0\0\x0d\x02\0\0\0\xb7\0\0\0\x17\0\0\0\x25\x02\0\0\x01\0\0\x0c\x19\0\0\
\0\x4c\x03\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x1b\0\
\0\0\x04\0\0\0\x04\0\0\0\x51\x03\0\0\0\0\0\x0e\x1c\0\0\0\x01\0\0\0\x5a\x03\0\0\
\x01\0\0\x0f\0\0\0\0\x11\0\0\0\0\0\0\0\x20\0\0\0\x60\x03\0\0\x01\0\0\x0f\0\0\0\
\0\x1d\0\0\0\0\0\0\0\x04\0\0\0\0\x69\x6e\x74\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\
\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x5f\x5f\x75\x33\x32\0\x75\x6e\
\x73\x69\x67\x6e\x65\x64\x20\x69\x6e\x74\0\x73\x6f\x66\x74\x69\x72\x71\x5f\x76\
\x61\x6c\x5f\x74\0\x73\x6f\x66\x74\x69\x72\x71\x5f\x76\x61\x6c\0\x6c\x61\x74\
\x65\x6e\x63\x79\0\x74\x73\0\x75\x36\x34\0\x5f\x5f\x75\x36\x34\0\x75\x6e\x73\
\x69\x67\x6e\x65\x64\x20\x6c\x6f\x6e\x67\x20\x6c\x6f\x6e\x67\0\x74\x79\x70\x65\
\0\x6b\x65\x79\0\x76\x61\x6c\x75\x65\0\x6d\x61\x78\x5f\x65\x6e\x74\x72\x69\x65\
\x73\0\x74\x62\x6c\x5f\x73\x6f\x66\x74\x69\x72\x71\0\x6e\x65\x74\x64\x61\x74\
\x61\x5f\x73\x6f\x66\x74\x69\x72\x71\x5f\x65\x6e\x74\x72\x79\0\x70\x61\x64\0\
\x76\x65\x63\0\x75\x33\x32\0\x70\x74\x72\0\x74\x72\x61\x63\x65\x70\x6f\x69\x6e\
\x74\x2f\x69\x72\x71\x2f\x73\x6f\x66\x74\x69\x72\x71\x5f\x65\x6e\x74\x72\x79\0\
\x2f\x65\x62\x70\x66\x2d\x63\x6f\x2d\x72\x65\x2f\x73\x72\x63\x2f\x73\x6f\x66\
\x74\x69\x72\x71\x2e\x62\x70\x66\x2e\x63\0\x20\x20\x20\x20\x75\x33\x32\x20\x76\
\x65\x63\x20\x3d\x20\x70\x74\x72\x2d\x3e\x76\x65\x63\x3b\0\x20\x20\x20\x20\x69\
\x66\x20\x28\x76\x65\x63\x20\x3e\x20\x4e\x45\x54\x44\x41\x54\x41\x5f\x53\x4f\
\x46\x54\x49\x52\x51\x5f\x4d\x41\x58\x5f\x49\x52\x51\x53\x2d\x31\x29\x20\x7b\0\
\x20\x20\x20\x20\x76\x61\x6c\x70\x20\x3d\x20\x62\x70\x66\x5f\x6d\x61\x70\x5f\
\x6c\x6f\x6f\x6b\x75\x70\x5f\x65\x6c\x65\x6d\x28\x26\x74\x62\x6c\x5f\x73\x6f\
\x66\x74\x69\x72\x71\x2c\x20\x26\x76\x65\x63\x29\x3b\0\x20\x20\x20\x20\x69\x66\
\x20\x28\x76\x61\x6c\x70\x29\x20\x7b\0\x20\x20\x20\x20\x20\x20\x20\x20\x76\x61\
\x6c\x70\x2d\x3e\x74\x73\x20\x3d\x20\x62\x70\x66\x5f\x6b\x74\x69\x6d\x65\x5f\
\x67\x65\x74\x5f\x6e\x73\x28\x29\x3b\0\x20\x20\x20\x20\x20\x20\x20\x20\x76\x61\
\x6c\x2e\x6c\x61\x74\x65\x6e\x63\x79\x20\x3d\x20\x30\x3b\0\x20\x20\x20\x20\x20\
\x20\x20\x20\x76\x61\x6c\x2e\x74\x73\x20\x3d\x20\x62\x70\x66\x5f\x6b\x74\x69\
\x6d\x65\x5f\x67\x65\x74\x5f\x6e\x73\x28\x29\x3b\0\x20\x20\x20\x20\x20\x20\x20\
\x20\x62\x70\x66\x5f\x6d\x61\x70\x5f\x75\x70\x64\x61\x74\x65\x5f\x65\x6c\x65\
\x6d\x28\x26\x74\x62\x6c\x5f\x73\x6f\x66\x74\x69\x72\x71\x2c\x20\x26\x76\x65\
\x63\x2c\x20\x26\x76\x61\x6c\x2c\x20\x42\x50\x46\x5f\x41\x4e\x59\x29\x3b\0\x7d\
\0\x6e\x65\x74\x64\x61\x74\x61\x5f\x73\x6f\x66\x74\x69\x72\x71\x5f\x65\x78\x69\
\x74\0\x74\x72\x61\x63\x65\x70\x6f\x69\x6e\x74\x2f\x69\x72\x71\x2f\x73\x6f\x66\
\x74\x69\x72\x71\x5f\x65\x78\x69\x74\0\x20\x20\x20\x20\x69\x66\x20\x28\x21\x76\
\x61\x6c\x70\x29\x20\x7b\0\x20\x20\x20\x20\x75\x36\x34\x20\x6c\x61\x74\x65\x6e\
\x63\x79\x20\x3d\x20\x28\x62\x70\x66\x5f\x6b\x74\x69\x6d\x65\x5f\x67\x65\x74\
\x5f\x6e\x73\x28\x29\x20\x2d\x20\x76\x61\x6c\x70\x2d\x3e\x74\x73\x29\x20\x2f\
\x20\x31\x30\x30\x30\x3b\0\x2f\x65\x62\x70\x66\x2d\x63\x6f\x2d\x72\x65\x2f\x73\
\x72\x63\x2f\x2e\x2e\x2f\x6b\x65\x72\x6e\x65\x6c\x2d\x63\x6f\x6c\x6c\x65\x63\
\x74\x6f\x72\x2f\x69\x6e\x63\x6c\x75\x64\x65\x73\x2f\x6e\x65\x74\x64\x61\x74\
\x61\x5f\x63\x6f\x6d\x6d\x6f\x6e\x2e\x68\0\x20\x20\x20\x20\x5f\x5f\x73\x79\x6e\
\x63\x5f\x66\x65\x74\x63\x68\x5f\x61\x6e\x64\x5f\x61\x64\x64\x28\x72\x65\x73\
\x2c\x20\x76\x61\x6c\x75\x65\x29\x3b\0\x20\x20\x20\x20\x69\x66\x20\x28\x20\x28\
\x30\x78\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x20\
\x2d\x20\x2a\x72\x65\x73\x29\x20\x3c\x3d\x20\x76\x61\x6c\x75\x65\x29\x20\x7b\0\
\x20\x20\x20\x20\x20\x20\x20\x20\x2a\x72\x65\x73\x20\x3d\x20\x76\x61\x6c\x75\
\x65\x3b\0\x63\x68\x61\x72\0\x5f\x6c\x69\x63\x65\x6e\x73\x65\0\x2e\x6d\x61\x70\
\x73\0\x6c\x69\x63\x65\x6e\x73\x65\0\x9f\xeb\x01\0\x20\0\0\0\0\0\0\0\x24\0\0\0\
\x24\0\0\0\xf4\x01\0\0\x18\x02\0\0\0\0\0\0\x08\0\0\0\xbb\0\0\0\x01\0\0\0\0\0\0\
\0\x16\0\0\0\x3a\x02\0\0\x01\0\0\0\0\0\0\0\x1a\0\0\0\x10\0\0\0\xbb\0\0\0\x0e\0\
\0\0\0\0\0\0\xd8\0\0\0\xf6\0\0\0\x14\x7c\0\0\x08\0\0\0\xd8\0\0\0\xf6\0\0\0\x09\
\x7c\0\0\x10\0\0\0\xd8\0\0\0\x0e\x01\0\0\x09\x88\0\0\x20\0\0\0\xd8\0\0\0\0\0\0\
\0\0\0\0\0\x28\0\0\0\xd8\0\0\0\x3a\x01\0\0\x0c\x98\0\0\x48\0\0\0\xd8\0\0\0\x6e\
\x01\0\0\x09\x9c\0\0\x50\0\0\0\xd8\0\0\0\x7e\x01\0\0\x14\xa0\0\0\x58\0\0\0\xd8\
\0\0\0\x7e\x01\0\0\x12\xa0\0\0\x70\0\0\0\xd8\0\0\0\xa5\x01\0\0\x15\xa8\0\0\x78\
\0\0\0\xd8\0\0\0\xbe\x01\0\0\x12\xac\0\0\x80\0\0\0\xd8\0\0\0\xbe\x01\0\0\x10\
\xac\0\0\x90\0\0\0\xd8\0\0\0\xa5\x01\0\0\x15\xa8\0\0\xa8\0\0\0\xd8\0\0\0\xe3\
\x01\0\0\x09\xb0\0\0\xc8\0\0\0\xd8\0\0\0\x23\x02\0\0\x01\xc0\0\0\x3a\x02\0\0\
\x10\0\0\0\0\0\0\0\xd8\0\0\0\xf6\0\0\0\x14\xd8\0\0\x08\0\0\0\xd8\0\0\0\xf6\0\0\
\0\x09\xd8\0\0\x10\0\0\0\xd8\0\0\0\x0e\x01\0\0\x09\xe4\0\0\x20\0\0\0\xd8\0\0\0\
\0\0\0\0\0\0\0\0\x28\0\0\0\xd8\0\0\0\x3a\x01\0\0\x0c\xf4\0\0\x48\0\0\0\xd8\0\0\
\0\x56\x02\0\0\x09\xf8\0\0\x50\0\0\0\xd8\0\0\0\x67\x02\0\0\x14\x0c\x01\0\x58\0\
\0\0\xd8\0\0\0\x67\x02\0\0\x2f\x0c\x01\0\x60\0\0\0\xd8\0\0\0\x67\x02\0\0\x27\
\x0c\x01\0\x68\0\0\0\xd8\0\0\0\x67\x02\0\0\x33\x0c\x01\0\x70\0\0\0\xa1\x02\0\0\
\xdf\x02\0\0\x05\x48\0\0\x80\0\0\0\xa1\x02\0\0\x05\x03\0\0\x20\x4c\0\0\x88\0\0\
\0\xa1\x02\0\0\x05\x03\0\0\x1e\x4c\0\0\x90\0\0\0\xa1\x02\0\0\x05\x03\0\0\x0a\
\x4c\0\0\x98\0\0\0\xa1\x02\0\0\x36\x03\0\0\x0e\x50\0\0\xa0\0\0\0\xd8\0\0\0\x23\
\x02\0\0\x01\x1c\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x03\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc9\0\0\0\0\0\x03\0\xc8\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\xd0\0\0\0\0\0\x03\0\x68\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\x03\0\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc2\0\0\0\0\0\x05\0\xa0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x12\0\x03\0\0\0\0\0\0\0\0\0\xd8\0\0\0\0\0\0\
\0\x86\0\0\0\x11\0\x07\0\0\0\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\x4b\0\0\0\x12\0\x05\
\0\0\0\0\0\0\0\0\0\xb0\0\0\0\0\0\0\0\xa0\0\0\0\x11\0\x08\0\0\0\0\0\0\0\0\0\x04\
\0\0\0\0\0\0\0\x28\0\0\0\0\0\0\0\x01\0\0\0\x07\0\0\0\xa8\0\0\0\0\0\0\0\x01\0\0\
\0\x07\0\0\0\x28\0\0\0\0\0\0\0\x01\0\0\0\x07\0\0\0\x4c\x02\0\0\0\0\0\0\x04\0\0\
\0\x07\0\0\0\x64\x02\0\0\0\0\0\0\x04\0\0\0\x09\0\0\0\x2c\0\0\0\0\0\0\0\x04\0\0\
\0\x01\0\0\0\x3c\0\0\0\0\0\0\0\x04\0\0\0\x04\0\0\0\x50\0\0\0\0\0\0\0\x04\0\0\0\
\x01\0\0\0\x60\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x70\0\0\0\0\0\0\0\x04\0\0\0\
\x01\0\0\0\x80\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x90\0\0\0\0\0\0\0\x04\0\0\0\
\x01\0\0\0\xa0\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\xb0\0\0\0\0\0\0\0\x04\0\0\0\
\x01\0\0\0\xc0\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\xd0\0\0\0\0\0\0\0\x04\0\0\0\
\x01\0\0\0\xe0\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\xf0\0\0\0\0\0\0\0\x04\0\0\0\
\x01\0\0\0\0\x01\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x10\x01\0\0\0\0\0\0\x04\0\0\0\
\x01\0\0\0\x20\x01\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x38\x01\0\0\0\0\0\0\x04\0\0\
\0\x04\0\0\0\x48\x01\0\0\0\0\0\0\x04\0\0\0\x04\0\0\0\x58\x01\0\0\0\0\0\0\x04\0\
\0\0\x04\0\0\0\x68\x01\0\0\0\0\0\0\x04\0\0\0\x04\0\0\0\x78\x01\0\0\0\0\0\0\x04\
\0\0\0\x04\0\0\0\x88\x01\0\0\0\0\0\0\x04\0\0\0\x04\0\0\0\x98\x01\0\0\0\0\0\0\
\x04\0\0\0\x04\0\0\0\xa8\x01\0\0\0\0\0\0\x04\0\0\0\x04\0\0\0\xb8\x01\0\0\0\0\0\
\0\x04\0\0\0\x04\0\0\0\xc8\x01\0\0\0\0\0\0\x04\0\0\0\x04\0\0\0\xd8\x01\0\0\0\0\
\0\0\x04\0\0\0\x04\0\0\0\xe8\x01\0\0\0\0\0\0\x04\0\0\0\x04\0\0\0\xf8\x01\0\0\0\
\0\0\0\x04\0\0\0\x04\0\0\0\x08\x02\0\0\0\0\0\0\x04\0\0\0\x04\0\0\0\x18\x02\0\0\
\0\0\0\0\x04\0\0\0\x04\0\0\0\x28\x02\0\0\0\0\0\0\x04\0\0\0\x04\0\0\0\x10\x12\
\x11\x13\0\x6e\x65\x74\x64\x61\x74\x61\x5f\x73\x6f\x66\x74\x69\x72\x71\x5f\x65\
\x6e\x74\x72\x79\0\x2e\x72\x65\x6c\x74\x72\x61\x63\x65\x70\x6f\x69\x6e\x74\x2f\
\x69\x72\x71\x2f\x73\x6f\x66\x74\x69\x72\x71\x5f\x65\x6e\x74\x72\x79\0\x2e\x74\
\x65\x78\x74\0\x2e\x72\x65\x6c\x2e\x42\x54\x46\x2e\x65\x78\x74\0\x6e\x65\x74\
\x64\x61\x74\x61\x5f\x73\x6f\x66\x74\x69\x72\x71\x5f\x65\x78\x69\x74\0\x2e\x72\
\x65\x6c\x74\x72\x61\x63\x65\x70\x6f\x69\x6e\x74\x2f\x69\x72\x71\x2f\x73\x6f\
\x66\x74\x69\x72\x71\x5f\x65\x78\x69\x74\0\x2e\x6d\x61\x70\x73\0\x74\x62\x6c\
\x5f\x73\x6f\x66\x74\x69\x72\x71\0\x2e\x6c\x6c\x76\x6d\x5f\x61\x64\x64\x72\x73\
\x69\x67\0\x5f\x6c\x69\x63\x65\x6e\x73\x65\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\
\x73\x79\x6d\x74\x61\x62\0\x2e\x72\x65\x6c\x2e\x42\x54\x46\0\x4c\x42\x42\x31\
\x5f\x34\0\x4c\x42\x42\x30\x5f\x34\0\x4c\x42\x42\x30\x5f\x33\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xa9\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x3c\x0d\0\0\0\0\0\0\xd7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x38\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x1b\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\
\0\0\xd8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\
\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe8\x0a\0\0\0\0\0\0\x20\0\0\0\
\0\0\0\0\x0e\0\0\0\x03\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x64\0\0\0\x01\
\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x18\x01\0\0\0\0\0\0\xb0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x60\0\0\0\x09\0\0\0\x40\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\x0b\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x0e\0\0\0\x05\
\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x80\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\xc8\x01\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xa1\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\xe8\x01\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\xbd\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xec\x01\0\0\
\0\0\0\0\xd4\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\xb9\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x18\x0b\0\0\0\0\0\0\x20\
\0\0\0\0\0\0\0\x0e\0\0\0\x09\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x42\0\0\
\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc0\x07\0\0\0\0\0\0\x38\x02\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x3e\0\0\0\x09\0\0\0\
\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x38\x0b\0\0\0\0\0\0\0\x02\0\0\0\0\0\0\x0e\0\
\0\0\x0b\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x92\0\0\0\x03\x4c\xff\x6f\0\
\0\0\x80\0\0\0\0\0\0\0\0\0\0\0\0\x38\x0d\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb1\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\xf8\x09\0\0\0\0\0\0\xf0\0\0\0\0\0\0\0\x01\0\0\0\x06\0\0\0\x08\
\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0";

	*sz = sizeof(data) - 1;
	return (const void *)data;
}

#ifdef __cplusplus
struct softirq_bpf *softirq_bpf::open(const struct bpf_object_open_opts *opts) { return softirq_bpf__open_opts(opts); }
struct softirq_bpf *softirq_bpf::open_and_load() { return softirq_bpf__open_and_load(); }
int softirq_bpf::load(struct softirq_bpf *skel) { return softirq_bpf__load(skel); }
int softirq_bpf::attach(struct softirq_bpf *skel) { return softirq_bpf__attach(skel); }
void softirq_bpf::detach(struct softirq_bpf *skel) { softirq_bpf__detach(skel); }
void softirq_bpf::destroy(struct softirq_bpf *skel) { softirq_bpf__destroy(skel); }
const void *softirq_bpf::elf_bytes(size_t *sz) { return softirq_bpf__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
softirq_bpf__assert(struct softirq_bpf *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __SOFTIRQ_BPF_SKEL_H__ */
