// SPDX-License-Identifier: GPL-3.0-or-later

package openldap

import (
	"context"
	"fmt"
	"os/exec"
	"time"

	"github.com/netdata/netdata/go/plugins/logger"
)

type ldapSearchBinary interface {
	// statistics() ([]byte, error)
}

func newLdapSearchExecBinary(cfg Config, log *logger.Logger) ldapSearchBinary {
	return &ldapSearchExec{
		Logger:       log,
		binaryPath:      cfg.BinaryPath,
		username: cfg.Username,
		password: cfg.Password,
		timeout:      cfg.Timeout.Duration(),
	}
}

type ldapSearchExec struct {
	*logger.Logger

	binaryPath      string
	username string
	password string
	timeout      time.Duration
	// instanceName string
}

func (e *ldapSearchExec) command(metricName string) ([]byte, error) {
	ctx, cancel := context.WithTimeout(context.Background(), e.timeout)
	defer cancel()

	cmd := exec.CommandContext(ctx, e.binaryPath, "-x", "-D", fmt.Sprintf("\"%s\"", e.username), "-w", fmt.Sprintf("\"%s\"", e.password) , "-b", metricName ,"-s", "base"," monitorCounter")

	e.Debugf("executing '%s'", cmd)

	bs, err := cmd.Output()
	if err != nil {
		return nil, fmt.Errorf("error on '%s': %v", cmd, err)
	}

	return bs, nil
}

// func newVarnishstatDockerExecBinary(cfg Config, log *logger.Logger) varnishstatBinary {
// 	return &varnishstatDockerExec{
// 		Logger:       log,
// 		timeout:      cfg.Timeout.Duration(),
// 		instanceName: cfg.InstanceName,
// 		container:    cfg.DockerContainer,
// 	}
// }

// type varnishstatDockerExec struct {
// 	*logger.Logger

// 	timeout      time.Duration
// 	instanceName string
// 	container    string
// }

// func (e *varnishstatDockerExec) statistics() ([]byte, error) {
// 	ctx, cancel := context.WithTimeout(context.Background(), e.timeout)
// 	defer cancel()

// 	timeS := strconv.Itoa(max(int(e.timeout.Seconds()), 1))

// 	args := []string{"-1", "-t", timeS}
// 	if e.instanceName != "" {
// 		args = append(args, "-n", e.instanceName)
// 	}

// 	return dockerhost.Exec(ctx, e.container, "varnishstat", args...)
// }
