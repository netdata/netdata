## netdata configuration for IBM DB2 monitoring
## https://github.com/netdata/netdata/tree/master/src/go/plugin/ibm.d/collector/db2#configuration

## This collector monitors IBM DB2 databases across all editions:
## - DB2 LUW (Linux, Unix, Windows)
## - DB2 for z/OS
## - DB2 for i (AS/400)
## - Db2 on Cloud
## It uses unixODBC exclusively for database connectivity, which provides several advantages:
## ✅ No IBM DB2 client library licensing required
## ✅ Works with both DB2 and AS/400 systems
## ✅ Simplified deployment and configuration
## ✅ Consistent behavior across all IBM database types

## Prerequisites:
## 1. Install unixODBC and tools:
##    Ubuntu/Debian: apt-get install unixodbc
##    RHEL/CentOS: yum install unixODBC
## 2. Install IBM DB2 ODBC drivers:
##    - IBM Data Server Driver Package (includes ODBC drivers)
##    - IBM i Access Client Solutions (for AS/400 connectivity)
##    - Distribution packages (e.g., ibm-db2-odbc)
## 3. Verify driver registration: odbcinst -q -d
## 4. Database user must have SELECT permissions on SYSIBMADM schema views

#------------------------------------------------------------------------------
# JOBS (data collection sources)

## Each job represents a connection to a DB2 database.
## You can define multiple jobs to monitor multiple databases.

jobs:
  ## Example: Component-based configuration (recommended)
  ## Uncomment and modify the following example:
  
  # - name: db2_production
  #   # Component-based ODBC configuration (automatically uses ODBC)
  #   hostname: db2.example.com
  #   port: 50000
  #   database: sample
  #   username: db2inst1
  #   password: password
  #   # IMPORTANT: For production environments, consider using secure methods for credential management
  #   # instead of storing them directly in this file (e.g., environment variables, secrets management systems).
  #   
  #   # Update interval in seconds
  #   # Default: 5
  #   update_every: 5
  #   
  #   # Connection timeout
  #   # Default: 2
  #   timeout: 2
  #   
  #   # Maximum database connections
  #   # Default: 1
  #   max_db_conns: 1
  #   
  #   # Maximum database connection lifetime
  #   # Default: 10m
  #   max_db_life_time: 10m
  
  ## Example: ODBC DSN string format
  # - name: db2_dsn
  #   # Direct ODBC connection string
  #   dsn: 'Driver={IBM DB2 ODBC DRIVER};Database=sample;Hostname=db2.example.com;Port=50000;Protocol=TCPIP;Uid=db2inst1;Pwd=password'

  ## Example: SSL connection (Db2 on Cloud)
  # - name: db2_cloud
  #   # Component-based SSL configuration
  #   hostname: xxx.databases.appdomain.cloud
  #   port: 32733
  #   database: bludb
  #   username: your_username
  #   password: your_password
  #   use_ssl: true
  #   ssl_server_cert_path: '/path/to/DigiCertGlobalRootCA.crt'
  #   timeout: 10
  #   
  #   # OR using DSN string with SSL
  #   # dsn: 'Driver={IBM DB2 ODBC DRIVER};Database=bludb;Hostname=xxx.databases.appdomain.cloud;Port=32733;Protocol=TCPIP;Uid=username;Pwd=password;Security=SSL;SSLServerCertificate=/path/to/cert.crt'

  ## Example: Large database with cardinality control
  ## Use this configuration for databases with many objects to prevent
  ## excessive memory usage and chart creation
  
  # - name: db2_large
  #   dsn: 'DATABASE=warehouse;HOSTNAME=db2.example.com;PORT=50000;PROTOCOL=TCPIP;UID=monitor;PWD=secret'
  #   
  #   # Per-instance metric collection settings
  #   # These control which detailed metrics are collected
  #   
  #   # Collect per-database metrics
  #   # Default: true
  #   collect_database_metrics: true
  #   
  #   # Maximum number of databases to monitor
  #   # Default: 10 (0 = unlimited)
  #   max_databases: 10
  #   
  #   # Pattern to filter databases. Supports wildcards (*, ?) and multiple patterns separated by |
  #   # Example: 'PROD*' to monitor only production databases, '*TEST*|*DEV*' for test or dev
  #   # Default: '' (all databases)
  #   collect_databases_matching: ''
  #   
#   # Collect buffer pool metrics
#   # Default: true
#   collect_bufferpool_metrics: true
#   
#   # Maximum number of buffer pools to chart individually (others go to __other__)
#   # Default: 20 (0 = disable per-instance charts)
#   max_bufferpools: 20
#   
#   # Buffer pool selectors (wildcards supported)
#   include_bufferpools:
#     - 'IBMDEFAULTBP'
#     - 'IBMSYSTEMBP*'
#   exclude_bufferpools:
#     - 'TMP*'
  #   
#   # Collect tablespace metrics
#   # Default: true
#   collect_tablespace_metrics: true
#   
#   # Maximum number of tablespaces to chart individually (others go to __other__)
#   # Default: 50 (0 = disable per-instance charts)
#   max_tablespaces: 50
#   
#   # Tablespace selectors
#   include_tablespaces:
#     - 'SYSCATSPACE'
#     - 'TEMPSPACE*'
#   exclude_tablespaces:
#     - '*TEMP2*'
  #   
  #   # Collect connection metrics
  #   # Default: true
  #   collect_connection_metrics: true
  #   
#   # Maximum number of connections to chart individually
#   # Default: 50 (0 = disable per-connection charts)
#   max_connections: 50
#   
#   # Connection selectors (matched against application_id, application_name, hostname)
#   include_connections:
#     - 'db2sysc*'
#     - 'db2agent*'
#   exclude_connections:
#     - '*TEMP*'
  # 
#   # Collect table metrics (size, activity)
#   # Default: false
#   collect_table_metrics: false
# 
#   # Maximum number of tables to chart individually
#   # Default: 25 (0 = disable per-table charts)
#   max_tables: 25
# 
#   # Table selectors (schema.table syntax)
#   include_tables:
#     - 'MYSCHEMA.*'
#   exclude_tables:
#     - '*.TMP*'
  # 
  #   # Collect index metrics (scans, fragmentation)
  #   # Default: false
  #   collect_index_metrics: false
  # 
#   # Maximum number of indexes to chart individually
#   # Default: 50 (0 = disable per-index charts)
#   max_indexes: 50
  #
  #   # Number of days to look back for backup history
  #   # Default: 30
  #   backup_history_days: 30
  # 
#   # Index selectors (schema.index syntax)
#   include_indexes:
#     - 'MYSCHEMA.IDX_*'
#   exclude_indexes:
#     - '*.TMP*'
  #
  #   # Collect SQL statement cache metrics (DB2 9.7+ LUW)
  #   # Default: true
  #   collect_statement_metrics: true
  #
  #   # Maximum number of SQL statements to monitor
  #   # Default: 50 (0 = unlimited)
  #   max_statements: 50
  #
  #   # Minimum executions for a statement to be monitored
  #   # Default: 10
  #   statement_min_executions: 10
  #
  #   # Minimum CPU time in milliseconds for a statement to be monitored
  #   # Default: 100
  #   statement_min_cpu_ms: 100
  #
  #   # Collect memory pool metrics (DB2 9.7+ LUW)
  #   # Default: true
  #   collect_memory_metrics: true
  #
  #   # Collect enhanced wait metrics for connections (DB2 9.7+ LUW)
  #   # Default: true
  #   collect_wait_metrics: true
  #
  #   # Collect table I/O statistics (DB2 9.7+ LUW)
  #   # Default: true
  #   collect_table_io_metrics: true
  #
  #   # Minimum rows read for a table to be monitored for I/O statistics
  #   # Default: 1000
  #   table_min_rows_read: 1000
  #   
  #   # Virtual node (vnode) assignment
  #   # Associates this job with a Virtual Node in Netdata Cloud
  #   # Default: not set
  #   # vnode: 'db2-warehouse'

  ## Example: Minimal monitoring (global metrics only)
  ## Use this for basic monitoring without per-instance details
  
  # - name: db2_minimal
  #   dsn: 'DATABASE=sample;HOSTNAME=localhost;PORT=50000;PROTOCOL=TCPIP;UID=monitor;PWD=secret'
  #   # Disable all per-instance metrics
  #   collect_database_metrics: false
  #   collect_bufferpool_metrics: false
  #   collect_tablespace_metrics: false
  #   collect_connection_metrics: false

  ## Example: Filtered collection
  ## Monitor specific database objects using SQL LIKE patterns
  
  # - name: db2_filtered
  #   dsn: 'DATABASE=sample;HOSTNAME=localhost;PORT=50000;PROTOCOL=TCPIP;UID=monitor;PWD=secret'
  #   # Monitor only production databases
  #   collect_databases_matching: 'PROD*'
  #   
  #   # Monitor only system buffer pools
  #   collect_bufferpools_matching: 'IBMSYSTEM*'
  #   
  #   # Monitor only user tablespaces
  #   collect_tablespaces_matching: 'USER*'
  #   
  #   # Monitor only Java applications
  #   collect_connections_matching: '*java*'

  ## Example: DB2 for z/OS
  # - name: db2_zos
  #   dsn: 'DATABASE=DB2P;HOSTNAME=mainframe.example.com;PORT=446;PROTOCOL=TCPIP;UID=monitor;PWD=secret'
  #   # z/OS often has different default ports and may require specific settings
  #   timeout: 10

  ## Example: DB2 for i (AS/400)
  # - name: db2_iseries
  #   dsn: 'DATABASE=;HOSTNAME=as400.example.com;PORT=446;PROTOCOL=TCPIP;UID=monitor;PWD=secret'
  #   # Note: DATABASE is often empty for DB2 for i connections

#------------------------------------------------------------------------------
# COLLECTED METRICS

## Global metrics (always collected):
## - Database connections (total, active, executing, idle)
## - Lock waits, timeouts, deadlocks
## - Sort operations and overflows
## - Row activity (reads, inserts, updates, deletes)
## - Buffer pool hit ratios (aggregate)
## - Log space usage

## Per-database metrics (when collect_database_metrics is true):
## - Database status
## - Application connections count
## - Lock waits and deadlocks
## - Row activity
## - Log space used

## Per-buffer-pool metrics (when collect_bufferpool_metrics is true):
## - Hit ratio (data, index, XDA)
## - Page reads/writes (logical and physical)
## - Page usage statistics
## - Prefetch statistics

## Per-tablespace metrics (when collect_tablespace_metrics is true):
## - Usage percentage
## - Total/used/free size
## - Page size
## - State (normal, backup pending, etc.)

## Per-connection metrics (when collect_connection_metrics is true):
## - Connection state
## - Rows read/written
## - CPU time used
## - Application handle
##
## SQL statement cache metrics (when collect_statement_metrics is true):
## - Statement executions per second
## - Average execution time and CPU time
## - Rows read and modified
## - Logical and physical I/O operations
## - Lock wait time and sorts
##
## Memory pool metrics (when collect_memory_metrics is true):
## - Current memory usage by pool type
## - High water marks
## - Pool types: BP, DATABASE, LOCK_MGR, SHARED_SORT, PACKAGE_CACHE, etc.
##
## Table I/O statistics (when collect_table_io_metrics is true):
## - Table scans per second
## - Rows read per second
## - DML activity (inserts, updates, deletes)
## - Overflow accesses

#------------------------------------------------------------------------------
# TROUBLESHOOTING

## 1. "Connection refused" or "ODBC driver not found"
##    - Verify unixODBC and IBM DB2 ODBC drivers are installed
##    - Check ODBC driver registration: odbcinst -q -d
##    - Ensure driver name matches exactly (case-sensitive)
##    - Test connection: isql -v "DSN_STRING"

## 2. "SQL1042C An unexpected system error occurred"
##    - Verify network connectivity and firewall rules
##    - Check hostname and port are correct
##    - For SSL connections, verify certificate path and permissions

## 3. "SQL1032N No start database manager command was issued"
##    - Ensure DB2 instance is running on the server
##    - Check with: db2 list active databases

## 4. Certificate errors with SSL connections
##    - Use absolute paths for SSLServerCertificate
##    - Ensure certificate is in PEM format
##    - Check file permissions (readable by netdata user)
##    - For Db2 on Cloud, download certificate from IBM Cloud console

## 5. Permission denied errors
##    - Grant monitoring permissions:
##      GRANT SELECT ON SYSIBMADM.APPLICATIONS TO monitor_user;
##      GRANT SELECT ON SYSIBMADM.SNAPDB TO monitor_user;
##      GRANT SELECT ON SYSIBMADM.SNAPBP TO monitor_user;
##      GRANT SELECT ON SYSIBMADM.TBSP_UTILIZATION TO monitor_user;
##      GRANT SELECT ON SYSIBMADM.LOG_UTILIZATION TO monitor_user;
##      GRANT SELECT ON SYSIBMADM.ENV_INST_INFO TO monitor_user;
##      
##      -- For MON_GET_* functions (DB2 9.7+ LUW):
##      GRANT EXECUTE ON FUNCTION SYSPROC.MON_GET_PKG_CACHE_STMT TO monitor_user;
##      GRANT EXECUTE ON FUNCTION SYSPROC.MON_GET_MEMORY_POOL TO monitor_user;
##      GRANT EXECUTE ON FUNCTION SYSPROC.MON_GET_TABLE TO monitor_user;
##      GRANT EXECUTE ON FUNCTION SYSPROC.MON_GET_CONNECTION TO monitor_user;

## 6. High cardinality warnings
##    - Reduce max_databases, max_bufferpools, max_tablespaces, max_connections
##    - Use filtering patterns to monitor only important objects

#------------------------------------------------------------------------------
# TESTING YOUR CONFIGURATION

## To test this collector, run as netdata user:
## cd /usr/libexec/netdata/plugins.d/
## sudo -u netdata -s
## ./ibm.d.plugin -d -m db2 --dump=3s --dump-summary

## To test ODBC connectivity independently:
## isql -v "Driver={IBM DB2 ODBC DRIVER};Database=sample;Hostname=hostname;Port=50000;Protocol=TCPIP;Uid=user;Pwd=pass"

#------------------------------------------------------------------------------
# PERFORMANCE CONSIDERATIONS

## 1. Connection pooling: The collector maintains a connection pool. Adjust
##    max_db_conns based on your database's connection limits.

## 2. Query frequency: Each metric type runs its own query. With many instances,
##    this can create significant load. Consider:
##    - Increasing update_every for less critical databases
##    - Disabling per-instance metrics for non-production databases
##    - Using filtering to monitor only critical objects

## 3. Memory usage: Each monitored instance creates charts and dimensions.
##    With hundreds of tablespaces or connections, memory usage can grow.
##    Use the max_* settings to limit cardinality.

## 4. Network latency: For remote databases, consider:
##    - Increasing timeout values
##    - Running a local netdata node closer to the database
##    - Using connection compression if supported
