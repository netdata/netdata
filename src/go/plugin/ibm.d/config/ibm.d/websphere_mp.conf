## netdata configuration for IBM WebSphere Liberty MicroProfile Metrics monitoring
## https://github.com/netdata/netdata/tree/master/src/go/plugin/ibm.d/modules/websphere/mp#configuration

## This collector monitors IBM WebSphere Liberty servers with MicroProfile Metrics enabled.
## It provides monitoring through the standardized MicroProfile Metrics API,
## including JVM statistics, CPU usage, thread pools, servlets, and sessions.
##
## It requires the ibm.d.plugin (not the regular go.d.plugin) because it's part
## of the IBM ecosystem collectors that may require CGO and IBM libraries.

## Prerequisites:
## 1. WebSphere Liberty with mpMetrics-4.0 (or higher) feature enabled
## 2. Access to the /metrics endpoint (authentication optional)
## 3. IBM DB2 client libraries must be installed (for ibm.d.plugin)
## 4. LD_LIBRARY_PATH must include DB2 library path

#------------------------------------------------------------------------------
# JOBS (data collection sources)

## Each job represents a connection to a WebSphere Liberty server with MicroProfile Metrics.
## You can define multiple jobs to monitor multiple servers.
##
## URL Configuration: The collector requires a complete URL with full path.
## WebSphere Liberty admins can specify query string parameters to control monitoring level.
## Example: https://localhost:9443/metrics?scope=base&scope=vendor

jobs:
  ## Example: Basic WebSphere Liberty with MicroProfile Metrics
  ## Uncomment and modify the following example:
  
  # - name: liberty_mp_local
  #   # WebSphere Liberty server URL with complete path to metrics endpoint
  #   # REQUIRED: Must include full path to the metrics endpoint
  #   url: https://localhost:9443/metrics
  #   
  #   # To control monitoring level, add query parameters:
  #   # url: https://localhost:9443/metrics?scope=base&scope=vendor
  #   
  #   # Update interval in seconds
  #   # Default: 5
  #   update_every: 5
  #   
  #   # HTTP request timeout (MicroProfile endpoint may take longer)
  #   # Default: 10
  #   timeout: 10
  #   
  #   # Basic authentication credentials
  #   # Required if mpMetrics authentication is enabled
  #   username: admin
  #   password: adminpwd

  ## Example: Production server with comprehensive monitoring
  # - name: liberty_mp_production
  #   url: https://prod.example.com:9443/metrics
  #   username: monitor
  #   password: secret
  #   
  #   # TLS configuration
  #   tls_skip_verify: false
  #   tls_ca: /path/to/ca.crt
  #   
  #   # Enable metric categories
  #   collect_jvm_metrics: true
  #   collect_rest_metrics: true
  #   
  #   # Control cardinality for REST endpoints
  #   max_rest_endpoints: 30
  #   
  #   # Filter REST endpoints
  #   collect_rest_matching: "/api/*"

  ## Example: Multiple servers with different configurations
  # - name: liberty_mp_app1
  #   url: https://app1.example.com:9443/metrics
  #   username: monitor
  #   password: secret
  #   # Focus on JVM metrics only
  #   collect_rest_metrics: false
  #   
  # - name: liberty_mp_app2
  #   url: https://app2.example.com:9443/metrics
  #   username: monitor
  #   password: secret
  #   # Focus on REST API performance
  #   collect_rest_matching: "/api/v2/*"
  #   max_rest_endpoints: 15

  ## Example: Secure environment with client certificates
  # - name: liberty_mp_secure
  #   url: https://secure.example.com:9443/metrics
  #   tls_cert: /path/to/client.crt
  #   tls_key: /path/to/client.key
  #   tls_ca: /path/to/ca.crt
  #   
  #   # Server identification for clustering
  #   cell_name: SecureCell
  #   node_name: SecureNode01
  #   server_name: server1

  ## Example: Large environment with strict cardinality control
  ## Use this configuration for servers with many applications and endpoints
  ## to prevent excessive memory usage and chart creation
  
  # - name: liberty_mp_large
  #   url: https://large.example.com:9443/metrics
  #   username: monitor
  #   password: secret
  #   
  #   # Metric collection settings
  #   # These control which metrics are collected
  #   
  #   # Collect JVM metrics (memory, GC, threads, classes)
  #   # Default: true
  #   collect_jvm_metrics: true
  #   
  #   # Collect REST endpoint metrics
  #   # Default: true
  #   collect_rest_metrics: true
  #   
  #   # Cardinality limits
  #   
  #   # Maximum number of REST endpoints to monitor
  #   # Default: 50 (0 = unlimited)
  #   max_rest_endpoints: 25
  #   
  #   # Pattern to filter REST endpoints. Supports wildcards (*, ?) and multiple patterns separated by |
  #   # Example: '/api/*' to monitor only API endpoints, '/users/*|/orders/*' for specific paths
  #   # Default: '' (all endpoints)
  #   collect_rest_matching: '/api/v1/*'
  #   
  #   # Virtual node (vnode) assignment
  #   # Associates this job with a Virtual Node in Netdata Cloud
  #   # Default: not set
  #   # vnode: 'liberty-cluster1'

  ## Example: Minimal monitoring (JVM only)
  ## Use this for basic monitoring with minimal overhead
  
  # - name: liberty_mp_minimal
  #   url: https://minimal.example.com:9443/metrics
  #   username: monitor
  #   password: secret
  #   # Disable REST metrics to reduce overhead
  #   collect_rest_metrics: false

  ## Example: Development environment
  ## Less strict settings for development servers
  
  # - name: liberty_mp_dev
  #   url: https://dev.example.com:9443/metrics
  #   username: admin
  #   password: admin
  #   # Allow self-signed certificates in dev
  #   tls_skip_verify: true
  #   # More frequent updates for development
  #   update_every: 3
  #   # No limits in development
  #   max_rest_endpoints: 0

#------------------------------------------------------------------------------
# COLLECTED METRICS

## JVM metrics (always collected when collect_jvm_metrics is true):
## - Memory usage: heap used, committed, maximum
## - Garbage collection: collection count and time
## - Thread counts: total, daemon, peak, maximum
## - Class loading: loaded and unloaded classes
## - Memory pools: usage for different memory areas

## REST endpoint metrics (when collect_rest_metrics is true):
## Per-endpoint metrics for each discovered REST endpoint:
## - Request count and rate
## - Response time (average, min, max, percentiles)
## - Error counts by HTTP status code

## MicroProfile component metrics (when collect_mp_metrics is true):
## - Health check status and details
## - Configuration property access counts
## - Fault tolerance: circuit breaker, retry, timeout statistics
## - Security: authentication and authorization metrics

## Custom application metrics (when collect_custom_metrics is true):
## - Counter: monotonically increasing values
## - Gauge: current values that can go up and down
## - Histogram: distribution of values with percentiles
## - Timer: timing measurements with percentiles
## - Meter: rate measurements

#------------------------------------------------------------------------------
# TROUBLESHOOTING

## 1. "Connection refused" or timeout errors
##    - Verify WebSphere Liberty is running and the port is correct
##    - Check firewall rules
##    - Ensure mpMetrics feature is enabled in server.xml:
##      <featureManager>
##          <feature>mpMetrics-4.0</feature>
##      </featureManager>

## 2. "401 Unauthorized"
##    - Verify username and password
##    - Check user has appropriate role (reader or administrator)
##    - Verify mpMetrics authentication setting:
##      <mpMetrics authentication="true" />

## 3. "404 Not Found" for metrics endpoint
##    - Verify metrics_endpoint path (default: /metrics)
##    - Ensure mpMetrics feature is enabled
##    - Check Liberty version supports MicroProfile Metrics (20.0.0.3+)

## 4. Certificate errors
##    - For self-signed certificates, use: tls_skip_verify: true (not for production!)
##    - Provide proper CA certificate with tls_ca option
##    - Ensure certificate paths are absolute and readable

## 5. High memory usage
##    - Reduce max_rest_endpoints
##    - Use filtering to monitor only critical endpoints
##    - Increase update_every to reduce collection frequency

## 6. Missing vendor metrics
##    - Ensure Liberty is configured with appropriate features
##    - Check that servlet, session, and threadpool metrics are enabled
##    - Verify the application server is under load to generate metrics

## 7. No REST metrics
##    - Enable collect_rest_metrics: true
##    - Note: REST metrics are currently collected as "other" metrics
##    - Use collect_rest_matching to filter which metrics to collect

#------------------------------------------------------------------------------
# TESTING YOUR CONFIGURATION

## To test this collector, run as netdata user:
## cd /usr/libexec/netdata/plugins.d/
## sudo -u netdata -s
## export IBM_DB_HOME=/path/to/db2/client
## export LD_LIBRARY_PATH=$IBM_DB_HOME/lib:$LD_LIBRARY_PATH
## ./ibm.d.plugin -d -m websphere_mp

## To test MicroProfile Metrics connectivity independently:
## curl -k -u admin:adminpwd https://localhost:9443/metrics

## To check specific metric categories:
## curl -k -u admin:adminpwd "https://localhost:9443/metrics?scope=application"
## curl -k -u admin:adminpwd "https://localhost:9443/metrics?scope=base"
## curl -k -u admin:adminpwd "https://localhost:9443/metrics?scope=vendor"

#------------------------------------------------------------------------------
# PERFORMANCE CONSIDERATIONS

## 1. Collection frequency: MicroProfile Metrics endpoint can return large responses
##    with many metrics. For large applications, consider:
##    - Increasing update_every for less critical servers
##    - Using filtering to collect only necessary metrics
##    - Monitoring multiple small servers vs. one large server

## 2. Cardinality: Dynamic metrics create charts on demand. 
##    With hundreds of metrics, this can impact:
##    - Memory usage (each chart requires memory)
##    - Dashboard performance (too many charts)
##    - Storage requirements (more time series data)
##    Use max_* settings and filtering to control cardinality.

## 3. Network impact: The /metrics endpoint returns all available metrics.
##    For remote servers:
##    - Consider running Netdata locally on the Liberty server
##    - Increase timeout values for slow connections
##    - Use scope parameter if supported to limit response size

## 4. Application impact: Metrics collection has minimal impact on Liberty,
##    but consider:
##    - MicroProfile Metrics overhead is generally low
##    - Vendor metrics add minimal overhead
##    - All metrics are collected as simple values

#------------------------------------------------------------------------------
# MICROPROFILE METRICS SPECIFIC NOTES

## MicroProfile Metrics provides three scopes:
## 1. Base: Standard JVM and runtime metrics (always available)
## 2. Vendor: Liberty-specific metrics (similar to websphere collector)
## 3. Application: Custom metrics defined by applications

## Common base metrics:
## - jvm.memory.* (memory usage)
## - jvm.gc.* (garbage collection)
## - jvm.thread.* (thread statistics)
## - jvm.classloader.* (class loading)

## Vendor metrics (Liberty-specific):
## - vendor:servlet_* (servlet container)
## - vendor:connectionpool_* (connection pools)
## - vendor:threadpool_* (thread pools)

## Application metrics (custom):
## Applications can define custom metrics using annotations:
## @Counted, @Timed, @Gauged, @Metered, @ConcurrentGauge

## Example application metrics:
## application:business_orders_total (counter)
## application:response_time_seconds (timer)
## application:active_users (gauge)

#------------------------------------------------------------------------------
# COMPARISON WITH REGULAR WEBSPHERE COLLECTOR

## Use websphere_mp instead of websphere when:
## - You want detailed REST endpoint monitoring
## - You need custom application metrics
## - You prefer standardized MicroProfile metrics
## - You want histogram/percentile data

## Use websphere instead of websphere_mp when:
## - You only need basic JVM monitoring
## - You want lower overhead collection
## - You don't have MicroProfile Metrics enabled
## - You need Traditional WebSphere support (future)

## Both collectors can run simultaneously on different ports/endpoints.
