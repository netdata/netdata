# netdata python.d.plugin configuration for go_expvar
#
# This file is in YaML format. Generally the format is:
#
# name: value
#
# There are 2 sections:
#  - global variables
#  - one or more JOBS
#
# JOBS allow you to collect values from multiple sources.
# Each source will have its own set of charts.
#
# JOB parameters have to be indented (using spaces only, example below).

# ----------------------------------------------------------------------
# Global Variables
# These variables set the defaults for all JOBs, however each JOB
# may define its own, overriding the defaults.

# update_every sets the default data collection frequency.
# If unset, the python.d.plugin default is used.
# update_every: 1

# priority controls the order of charts at the netdata dashboard.
# Lower numbers move the charts towards the top of the page.
# If unset, the default for python.d.plugin is used.
# priority: 60000

# penalty indicates whether to apply penalty to update_every in case of failures.
# Penalty will increase every 5 failed updates in a row. Maximum penalty is 10 minutes.
# penalty: yes

# autodetection_retry sets the job re-check interval in seconds.
# The job is not deleted if check fails.
# Attempts to start the job are made once every autodetection_retry.
# This feature is disabled by default.
# autodetection_retry: 0

# ----------------------------------------------------------------------
# JOBS (data collection sources)
#
# Any number of jobs is supported.
#
# All python.d.plugin JOBS (for all its modules) support a set of
# predefined parameters. These are:
#
# job_name:
#     name: myname            # the JOB's name as it will appear at the
#                             # dashboard (by default is the job_name)
#                             # JOBs sharing a name are mutually exclusive
#     update_every: 1         # the JOB's data collection frequency
#     priority: 60000         # the JOB's order on the dashboard
#     penalty: yes            # the JOB's penalty
#     autodetection_retry: 0  # the JOB's re-check interval in seconds
#
# Additionally to the above, this plugin also supports the following:
#
#     url: 'http://127.0.0.1/debug/vars'       # the URL of the expvar endpoint
#
# As the plugin cannot possibly know the port your application listens on, there is no default value. Please include
# the whole path of the endpoint, as the expvar handler can be installed in a non-standard location.
#
# if the URL is password protected, the following are supported:
#
#     user: 'username'
#     pass: 'password'
#
#     collect_memstats: true        # enables charts for Go runtime's memory statistics
#     extra_charts: {}              # defines extra data/charts to monitor, please see the example below
#
# If collect_memstats is disabled and no extra charts are defined, this module will disable itself, as it has no data to
# collect.
#
# Please visit the module wiki page for more information on how to use the extra_charts variable:
#
# https://github.com/netdata/netdata/tree/master/collectors/python.d.plugin/go_expvar
#
# Configuration example
# ---------------------

#app1:
#  name : 'app1'
#  url  : 'http://127.0.0.1:8080/debug/vars'
#  collect_memstats: true
#  extra_charts:
#    - id: "runtime_goroutines"
#      options:
#        name: num_goroutines
#        title: "runtime: number of goroutines"
#        units: goroutines
#        family: runtime
#        context: expvar.runtime.goroutines
#        chart_type: line
#      lines:
#        - {expvar_key: 'runtime.goroutines', expvar_type: int, id: runtime_goroutines}
#    - id: "foo_counters"
#      options:
#        name: counters
#        title: "some random counters"
#        units: awesomeness
#        family: counters
#        context: expvar.foo.counters
#        chart_type: line
#      lines:
#        - {expvar_key: 'counters.cnt1', expvar_type: int, id: counters_cnt1}
#        - {expvar_key: 'counters.cnt2', expvar_type: float, id: counters_cnt2}

