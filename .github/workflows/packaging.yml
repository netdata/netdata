---
# Handles building of binary packages for the agent.
name: Packages
on:
  pull_request:
    branches:
      - master
      - develop
  workflow_dispatch:
    inputs:
      type:
        name: Package build type
        default: devel
        required: true
      version:
        name: Package version
        required: false
env:
  DISABLE_TELEMETRY: 1
concurrency:
  group: packages-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: true
jobs:
  matrix:
    name: Prepare Build Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Prepare tools
        run: |
          sudo apt-get update && sudo apt-get install -y python3-ruamel.yaml
      - name: Read build matrix
        id: set-matrix
        shell: python3 {0}
        run: |
          from ruamel.yaml import YAML
          import json
          yaml = YAML(typ='safe')
          entries = list()

          with open('.github/data/distros.yml') as f:
              data = yaml.load(f)

          for i, v in enumerate(data['include']):
              if 'packages' in data['include'][i]:
                  for arch in data['include'][i]['packages']['arches']:
                      entries.append({
                          'distro': data['include'][i]['distro'],
                          'version': data['include'][i]['version'],
                          'pkgclouddistro': data['include'][i]['packages']['repo_distro'],
                          'format': data['include'][i]['packages']['type'],
                          'base_image': data['include'][i]['base_image'] if 'base_image' in data['include'][i] else data['include'][i]['distro'],
                          'platform': data['platform_map'][arch],
                          'arch': arch
                      })

          entries.sort(key=lambda k: (k['arch'], k['distro'], k['version']))
          matrix = json.dumps({'include': entries}, sort_keys=True)
          print('Generated Matrix: ' + matrix)
          print('::set-output name=matrix::' + matrix)

  build:
    name: Build
    runs-on: ubuntu-latest
    env:
      DOCKER_CLI_EXPERIMENTAL: enabled
    needs:
      - matrix
    strategy:
      matrix: ${{ fromJson(needs.matrix.outputs.matrix) }}
      # We intentiaonally disable the fail-fast behavior so that a
      # build failure for one version doesn't prevent us from publishing
      # successfully built and tested packages for another version.
      fail-fast: false
      max-parallel: 8
    steps:
      - name: Checkout PR # Checkout the PR if it's a PR.
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # We need full history for versioning
          submodules: recursive
      - name: Checkout Tag # Otherwise check out the tag that triggered this.
        if: github.event_name == 'workflow_dispatch'
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.ref }}
          fetch-depth: 0 # We need full history for versioning
          submodules: recursive
      - name: Check Base Branch
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "runtype=${{ github.event.inputs.type }}" >> $GITHUB_ENV
            case "${{ github.event.inputs.type }}" in
              "release")
                echo "repo=${{ secrets.PACKAGE_CLOUD_REPO }}" >> $GITHUB_ENV
                echo "pkg_version=${{ github.event.inputs.version }}" >> $GITHUB_ENV
                echo "pkg_retention_days=365" >> $GITHUB_ENV
                ;;
              "nightly")
                echo "repo=${{ secrets.PACKAGE_CLOUD_REPO }}-edge" >> $GITHUB_ENV
                echo "pkg_version=${{ github.event.inputs.version }}" >> $GITHUB_ENV
                echo "pkg_retention_days=30" >> $GITHUB_ENV
                ;;
              *)
                echo "repo=${{ secrets.PACKAGE_CLOUD_REPO }}-devel" >> $GITHUB_ENV
                echo "pkg_version=0.${GITHUB_SHA}" >> $GITHUB_ENV
                echo "pkg_retention_days=30" >> $GITHUB_ENV
                ;;
            esac
          else
            echo "runtype=test" >> $GITHUB_ENV
            echo "pkg_version=$(cut -d'-' -f 1 packaging/version | sed -e 's/^v//')" >> $GITHUB_ENV
          fi
      - name: Setup QEMU
        if: matrix.platform != 'linux/amd64' && matrix.platform != 'linux/i386'
        uses: docker/setup-qemu-action@v1
      - name: Prepare Docker Environment
        shell: bash
        run: |
          echo '{"cgroup-parent": "/actions_job", "experimental": true}' | sudo tee /etc/docker/daemon.json 2>/dev/null
          sudo service docker restart
      - name: Set Base Image Version
        shell: bash
        run: |
          if [ -z "${{ matrix.alias }}" ] ; then
            echo "version=${{ matrix.version }}" >> $GITHUB_ENV
          else
            echo "version=${{ matrix.alias }}" >> $GITHUB_ENV
          fi
      - name: Fetch base image
        uses: nick-invision/retry@v2
        with:
          max_attempts: 3
          retry_wait_seconds: 30
          timeout_seconds: 900
          command: |
            docker pull --platform ${{ matrix.platform }} ${{ matrix.base_image }}:${{ env.version }}
            docker pull --platform ${{ matrix.platform }} netdata/package-builders:${{ matrix.distro }}${{ matrix.version }}
      - name: Build Packages
        shell: bash
        run: |
          docker run --security-opt seccomp=unconfined -e DISABLE_TELEMETRY=1 -e VERSION=${{ env.pkg_version }} --platform=${{ matrix.platform }} -v $PWD:/netdata netdata/package-builders:${{ matrix.distro }}${{ matrix.version }}
      - name: Test Packages
        shell: bash
        run: |
          docker run --security-opt seccomp=unconfined -e DISABLE_TELEMETRY=1 -e DISTRO=${{ matrix.distro }} -e VERSION=${{ env.pkg_version }} -e DISTRO_VERSION=${{ env.version }} --platform=${{ matrix.platform }} -v $PWD:/netdata ${{ matrix.base_image }}:${{ env.version }} /netdata/.github/scripts/pkg-test.sh
      - name: Save Packages
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.distro }}-${{ matrix.version }}-${{ matrix.arch }}-packages
          path: ${{ github.workspace }}/artifacts/*
      - name: Upload to PackageCloud
        if: github.event_name == 'workflow_dispatch'
        shell: bash
        env:
          PKG_CLOUD_TOKEN: ${{ secrets.PACKAGE_CLOUD_API_KEY }}
        run: |
          echo "Packages to upload:\n$(ls artifacts/*.${{ matrix.format }})"
          for pkgfile in artifacts/*.${{ matrix.format }} ; do
            .github/scripts/package_cloud_wrapper.sh yank ${{ env.repo }}/${{ matrix.pkgclouddistro }} $(basename ${pkgfile}) || true
            .github/scripts/package_cloud_wrapper.sh push ${{ env.repo }}/${{ matrix.pkgclouddistro }} ${pkgfile}
          done
      - name: Clean
        if: github.event_name == 'workflow_dispatch'
        shell: bash
        env:
          REPO: ${{ env.repo }}
          PKG_CLOUD_TOKEN: ${{ secrets.PACKAGE_CLOUD_API_KEY }}
          PACKAGE_CLOUD_RETENTION_DAYS: ${{ env.pkg_retention_days }}
        run: .github/scripts/old_package_purging.sh
      - name: Failure Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: 'danger'
          SLACK_ICON_EMOJI: ':github-actions:'
          SLACK_TITLE: 'Package Build failed:'
          SLACK_USERNAME: 'GitHub Actions'
          SLACK_MESSAGE: "${{ matrix.pkgclouddistro }} ${{ matrix.version }} package build for ${{ matrix.arch }} failed."
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: >-
          ${{
            failure()
            && github.event_name != 'pull_request'
            && startsWith(github.ref, 'refs/heads/master')
          }}
