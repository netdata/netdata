---
# Ci code for building release artifacts.
name: Go Tests
on:
  push: # Master branch checks only validate the build and generate artifacts for testing.
    branches:
      - master
  pull_request: null # PR checks only validate the build and generate artifacts for testing.
concurrency: # This keeps multiple instances of the job from running concurrently for the same ref and event type.
  group: go-test-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: true
jobs:
  matrix:
    name: Generate Build Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.get-version.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          sudo apt-get update || true
          sudo apt-get install -y python3-packaging
      - name: Get Go version and modules
        id: get-version
        run: .github/scripts/get-go-version.py

  tests:
    name: Go toolchain tests
    runs-on: ubuntu-latest
    needs:
      - matrix
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.matrix.outputs.matrix) }}
    steps:
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.version }}
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Go mod download
        run: go mod download
        working-directory: ${{ matrix.module }}
      - name: Compile
        run: |
          CGO_ENABLED=0 go build -o /tmp/go-test-build ${{ matrix.build_target }}
          /tmp/go-test-build --help || true
        working-directory: ${{ matrix.module }}
      - name: Go fmt
        run: |
          go fmt ./... | tee modified-files
          [ "$(wc -l modified-files | cut -f 1 -d ' ')" -eq 0 ] || exit 1
        working-directory: ${{ matrix.module }}
      - name: Go vet
        run: go vet ./...
        working-directory: ${{ matrix.module }}
      - name: Set up gotestfmt
        uses: GoTestTools/gotestfmt-action@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          version: v2.0.0
      - name: Go test
        run: |
          set -euo pipefail
          go test -json ./... -race -count=1 2>&1 | gotestfmt -hide all
        working-directory: ${{ matrix.module }}

  build-tests:
    name: Go build tests
    runs-on: ubuntu-latest
    needs:
      - matrix
    strategy:
      fail-fast: false
      matrix:
        platforms:
          - linux/386
          - linux/amd64
          - linux/arm
          - linux/arm64
          - linux/ppc64le
          - windows/amd64
        include: ${{ fromJson(needs.matrix.outputs.matrix) }}
    steps:
      - name: Skip Check
        id: skip
        run: echo "SKIPPED"
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.version }}
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set GOOS and GOARCH
        run: |
          echo "GOOS=$(echo "${{ matrix.platform }}" | cut -f 1 -d '/')" >> "${GITHUB_ENV}"
          echo "GOARCH=$(echo "${{ matrix.platform }}" | cut -f 2 -d '/')" >> "${GITHUB_ENV}"
      - name: Go mod download
        run: go mod download
        working-directory: ${{ matrix.module }}
      - name: Compile
        run: |
          CGO_ENABLED=0 go build -o /tmp/go-test-build ${{ matrix.build_target }}
        working-directory: ${{ matrix.module }}
