---
name: Docker
on:
  push:
    branches:
      - master
  pull_request: null
  workflow_dispatch:
    inputs:
      version:
        description: Version Tag
        default: nightly
        required: true
env:
  DISABLE_TELEMETRY: 1
concurrency:
  group: docker-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: true
jobs:
  file-check: # Check what files changed if we’re being run in a PR or on a push.
    name: Check Modified Files
    runs-on: ubuntu-latest
    outputs:
      run: ${{ steps.check-run.outputs.run }}
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Check files
        id: check-files
        uses: tj-actions/changed-files@v42
        with:
          since_last_remote_commit: ${{ github.event_name != 'pull_request' }}
          files: |
            **/*.c
            **/*.cc
            **/*.h
            **/*.hh
            **/*.in
            **/*.patch
            **/*.cmake
            .dockerignore
            CMakeLists.txt
            netdata-installer.sh
            .github/workflows/docker.yml
            .github/scripts/docker-test.sh
            .github/scripts/gen-docker-tags.py
            .github/scripts/gen-docker-build-info.py
            .github/scripts/gen-docker-imagetool-args.py
            packaging/cmake/
            packaging/docker/
            packaging/installer/
            packaging/runtime-check.sh
            packaging/*.version
            packaging/*.checksums
            src/aclk/aclk-schemas/
            src/ml/dlib/
            src/fluent-bit/
            src/web/server/h2o/libh2o/
          files_ignore: |
            netdata.spec.in
            **/*.md
      - name: List all changed files in pattern
        continue-on-error: true
        env:
          ALL_CHANGED_FILES: ${{ steps.check-files.outputs.all_changed_files }}
        run: |
          for file in ${ALL_CHANGED_FILES}; do
            echo "$file was changed"
          done
      - name: Check Run
        id: check-run
        run: |
          if [ "${{ steps.check-files.outputs.any_modified }}" == "true" ] || [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo 'run=true' >> "${GITHUB_OUTPUT}"
          else
            echo 'run=false' >> "${GITHUB_OUTPUT}"
          fi

  gen-tags:
    name: Generate Docker Tags
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.tag.outputs.tags }}
    steps:
      - name: Generate Tags
        id: tag
        run: |
          if [ ${{ github.event_name }} = 'workflow_dispatch' ]; then
            echo "tags=$(.github/scripts/gen-docker-tags.py ${{ github.event_name }} ${{ github.event.inputs.version }})" >> "${GITHUB_OUTPUT}"
          else
            echo "tags=$(.github/scripts/gen-docker-tags.py ${{ github.event_name }} '')" >> "${GITHUB_OUTPUT}"
          fi

  build-images:
    name: Build Docker Images
    needs:
      - file-check
      - gen-tags
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform:
          - linux/amd64
          - linux/i386
          - linux/arm/v7
          - linux/arm64
          - linux/ppc64le
      # Fail fast on releases so that we minimize the number of ‘dead’
      # images we push, but run everything to completion on other triggers.
      fail-fast: ${{ github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Skip Check
        id: skip
        if: needs.file-check.outputs.run != 'true'
        run: echo "SKIPPED"
      - name: Checkout
        id: checkout
        if: needs.file-check.outputs.run == 'true'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Mark image as official
        id: env
        if: github.repository == 'netdata/netdata' && needs.file-check.outputs.run == 'true' && github.event_name == 'workflow_dispatch'
        run: echo "OFFICIAL_IMAGE=true" >> "${GITHUB_ENV}"
      - name: Generate Build Output Config
        id: gen-config
        if: needs.file-check.outputs.run == 'true'
        run: echo "output-config=$(.github/scripts/gen-docker-build-output.py ${{ github.event_name }})" >> "${GITHUB_OUTPUT}"
      - name: Setup QEMU
        id: qemu
        if: matrix.platform != 'linux/i386' && matrix.platform != 'linux/amd64' && needs.file-check.outputs.run == 'true'
        uses: docker/setup-qemu-action@v3
      - name: Setup Buildx
        id: prepare
        if: needs.file-check.outputs.run == 'true'
        uses: docker/setup-buildx-action@v3
      - name: Docker Hub Login
        id: docker-hub-login
        if: github.repository == 'netdata/netdata' && needs.file-check.outputs.run == 'true' && github.event_name == 'workflow_dispatch'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
#      - name: GitHub Container Registry Login
#        id: ghcr-login
#        if: github.repository == 'netdata/netdata' && needs.file-check.outputs.run == 'true' && github.event_name == 'workflow_dispatch'
#        uses: docker/login-action@v3
#        with:
#          registry: ghcr.io
#          username: ${{ github.repository_owner }}
#          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Quay.io Login
        id: quay-login
        if: github.repository == 'netdata/netdata' && needs.file-check.outputs.run == 'true' && github.event_name == 'workflow_dispatch'
        uses: docker/login-action@v3
        with:
          registry: quay.io
          username: ${{ secrets.NETDATABOT_QUAY_USERNAME }}
          password: ${{ secrets.NETDATABOT_QUAY_TOKEN }}
      - name: Build Image
        id: build
        if: needs.file-check.outputs.run == 'true'
        uses: docker/build-push-action@v5
        with:
          platforms: ${{ matrix.platform }}
          tags: ${{ needs.gen-tags.outputs.tags }}
          build-args: OFFICIAL_IMAGE=${{ env.OFFICIAL_IMAGE }}
          outputs: ${{ steps.gen-config.outputs.output-config }}
      - name: Test Image
        id: test
        if: needs.file-check.outputs.run == 'true' && matrix.platform == 'linux/amd64'
        run: .github/scripts/docker-test.sh
      - name: Export Digest
        id: export-digest
        if: github.repository == 'netdata/netdata' && needs.file-check.outputs.run == 'true' && github.event_name == 'workflow_dispatch'
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
      - name: Upload digest
        id: upload-digest
        if: github.repository == 'netdata/netdata' && needs.file-check.outputs.run == 'true' && github.event_name == 'workflow_dispatch'
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1
      - name: Failure Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: 'danger'
          SLACK_FOOTER: ''
          SLACK_ICON_EMOJI: ':github-actions:'
          SLACK_TITLE: 'Docker build failed:'
          SLACK_USERNAME: 'GitHub Actions'
          SLACK_MESSAGE: |-
              ${{ github.repository }}: Building or testing Docker image for ${{ matrix.platform }} failed.
              Checkout: ${{ steps.checkout.outcome }}
              Setup environment: ${{ steps.env.outcome }}
              Generate Build Output Config: ${{ steps.gen-config.outcome }}
              Setup QEMU: ${{ steps.qemu.outcome }}
              Setup buildx: ${{ steps.prepare.outcome }}
              Login to DockerHub: ${{ steps.docker-hub-login.outcome }}
              Login to Quay: ${{ steps.quay-login.outcome }}
              Build image: ${{ steps.build.outcome }}
              Test image: ${{ steps.test.outcome }}
              Export digest: ${{ steps.export-digest.outcome }}
              Upload digest: ${{ steps.upload-digest.outcome }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: >-
          ${{
            failure()
            && github.event_name != 'pull_request'
            && github.repository == 'netdata/netdata'
            && needs.file-check.outputs.run == 'true'
          }}

  publish:
    name: Consolidate and tag images
    if: github.event_name == 'workflow_dispatch'
    needs:
      - build-images
      - gen-tags
    runs-on: ubuntu-latest
    steps:
      - name: Download digests
        id: fetch-digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true
      - name: Setup Buildx
        id: prepare
        uses: docker/setup-buildx-action@v3
      - name: Docker Hub Login
        id: docker-hub-login
        if: github.repository == 'netdata/netdata'
        continue-on-error: true
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: GitHub Container Registry Login
        id: ghcr-login
        if: github.repository == 'netdata/netdata'
        continue-on-error: true
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Quay.io Login
        id: quay-login
        if: github.repository == 'netdata/netdata'
        continue-on-error: true
        uses: docker/login-action@v3
        with:
          registry: quay.io
          username: ${{ secrets.NETDATABOT_QUAY_USERNAME }}
          password: ${{ secrets.NETDATABOT_QUAY_TOKEN }}
      - name: Create and Push Manifest for Docker Hub
        id: docker-hub-push
        if: github.repository == 'netdata/netdata' && steps.docker-hub-login.outcome == 'success'
        continue-on-error: true
        run: docker buildx imagetool create $(.github/scripts/gen-docker-imagetool-args.py /tmp/digests '' ${{ needs.gen-tags.outputs.tags }})
#      - name: Create and Push Manifest for GitHub Container Registry
#        id: ghcr-push
#        if: github.repository == 'netdata/netdata' && steps.ghcr-login.outcome == 'success'
#        continue-on-error: true
#        run: docker buildx imagetool create $(.github/scripts/gen-docker-imagetool-args.py /tmp/digests 'ghcr.io' ${{ needs.gen-tags.outputs.tags }})
      - name: Create and Push Manifest for Quay.io
        id: quay-push
        if: github.repository == 'netdata/netdata' && steps.quay-login.outcome == 'success'
        continue-on-error: true
        run: docker buildx imagetool create $(.github/scripts/gen-docker-imagetool-args.py /tmp/digests 'quay.io' ${{ needs.gen-tags.outputs.tags }})
      - name: Failure Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: 'danger'
          SLACK_FOOTER: ''
          SLACK_ICON_EMOJI: ':github-actions:'
          SLACK_TITLE: 'Publishing Docker images failed:'
          SLACK_USERNAME: 'GitHub Actions'
          SLACK_MESSAGE: |-
              ${{ github.repository }}: Publishing Docker images failed.
              Download digests: ${{ steps.fetch-digests.outcome }}
              Setup buildx: ${{ steps.prepare.outcome }}
              Login to DockerHub: ${{ steps.docker-hub-login.outcome }}
              Login to GHCR: ${{ steps.ghcr-login.outcome }}
              Login to Quay: ${{ steps.quay-login.outcome }}
              Publish DockerHub: ${{ steps.docker-hub-push.outcome }}
              Publish Quay: ${{ steps.quay-push.outcome }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: >-
          ${{
            failure()
            && github.repository == 'netdata/netdata'
          }}
